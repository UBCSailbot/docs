{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UBCSailbot Software Team Docs \u00b6","title":"Home"},{"location":"#ubcsailbot-software-team-docs","text":"","title":"UBCSailbot Software Team Docs"},{"location":"reference/","text":"UBCSailbot Software Reference \u00b6","title":"UBCSailbot Software Reference"},{"location":"reference/#ubcsailbot-software-reference","text":"","title":"UBCSailbot Software Reference"},{"location":"reference/github/workflow/","text":"Development Workflow Overview \u00b6 graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections. Version control: Git \u00b6 We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git. Remote server: GitHub \u00b6 We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#development-workflow-overview","text":"graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections.","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#version-control-git","text":"We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git.","title":"Version control: Git"},{"location":"reference/github/workflow/#remote-server-github","text":"We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Remote server: GitHub"},{"location":"reference/github/workflow/branches/","text":"Developing on Branches \u00b6 We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation . Creating a branch \u00b6 When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main . Branch naming convention \u00b6 When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: <github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice. Tracking and committing changes \u00b6 All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name> Merging branches \u00b6 There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened. Resolving merge conflicts \u00b6 Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#developing-on-branches","text":"We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation .","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#creating-a-branch","text":"When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main .","title":"Creating a branch"},{"location":"reference/github/workflow/branches/#branch-naming-convention","text":"When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: <github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice.","title":"Branch naming convention"},{"location":"reference/github/workflow/branches/#tracking-and-committing-changes","text":"All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name>","title":"Tracking and committing changes"},{"location":"reference/github/workflow/branches/#merging-branches","text":"There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened.","title":"Merging branches"},{"location":"reference/github/workflow/branches/#resolving-merge-conflicts","text":"Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Resolving merge conflicts"},{"location":"reference/github/workflow/issues/","text":"Creating Issues \u00b6 GitHub issues lets us plan and track our work on GitHub. Getting started with issue templates \u00b6 An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies! Adding issues to a project \u00b6 We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case). Adding issues to a milestone \u00b6 We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository. Labelling issues \u00b6 GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well! Adding assignees \u00b6 Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people. Submit the issue \u00b6 Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#creating-issues","text":"GitHub issues lets us plan and track our work on GitHub.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#getting-started-with-issue-templates","text":"An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies!","title":"Getting started with issue templates"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-project","text":"We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case).","title":"Adding issues to a project"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-milestone","text":"We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository.","title":"Adding issues to a milestone"},{"location":"reference/github/workflow/issues/#labelling-issues","text":"GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well!","title":"Labelling issues"},{"location":"reference/github/workflow/issues/#adding-assignees","text":"Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people.","title":"Adding assignees"},{"location":"reference/github/workflow/issues/#submit-the-issue","text":"Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Submit the issue"},{"location":"reference/github/workflow/pr/","text":"Pull Requests \u00b6 Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small. Creating a pull request \u00b6 To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards. Merging into main \u00b6 Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge : Reviewing a pull request \u00b6 A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#pull-requests","text":"Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small.","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#creating-a-pull-request","text":"To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards.","title":"Creating a pull request"},{"location":"reference/github/workflow/pr/#merging-into-main","text":"Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge :","title":"Merging into main"},{"location":"reference/github/workflow/pr/#reviewing-a-pull-request","text":"A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Reviewing a pull request"}]}