{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UBCSailbot Software Team Docs \u00b6","title":"Home"},{"location":"#ubcsailbot-software-team-docs","text":"","title":"UBCSailbot Software Team Docs"},{"location":"reference/","text":"UBCSailbot Software Reference \u00b6","title":"UBCSailbot Software Reference"},{"location":"reference/#ubcsailbot-software-reference","text":"","title":"UBCSailbot Software Reference"},{"location":"reference/ros/","text":"Robot Operating System \u00b6 Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. 1 It provides functionality for hardware abstraction, device drivers, communication between processes over multiple machines, tools for testing and visualization, and much more. 2 We use ROS because it is open-source, language-agnostic, and built with cross-collaboration in mind. It enables our subteams to work independently on well-defined components of our software system without having to worry about the hardware it runs on or the implementation of other components. The official ROS 2 documentation contains everything you need to get started using ROS. From it we have hand-picked the resources that are most relevant to our current and expected future usage of ROS assuming that you use our preconfigured workspace . To run our software on your device without our workspace, you would have to install ROS and the dependencies that are in our Docker images yourself. Workspace Configuration \u00b6 To get our workspace configuration running on your computer: Set it up by following the setup instructions Uncomment the ROS 2 tutorials section in .devcontainer/Dockerfile , then run the \"Remote-Containers: Rebuild Container\" VS Code command, to install the tutorials' dependencies Uncomment the ROS 2 tutorials section in src/new_project.repos , then run the \"setup\" VS Code task, to clone the repositories used in the tutorials Our workspace configuration contains easier methods of accomplishing some of the tutorial steps, or eliminates the need for them altogether. Tutorial sailbot_workspace Install a package All packages used in the tutorials are already installed (step 2 above) Clone a sample repo (ros_tutorials) ros_tutorials is already cloned (step 3 above) Resolve dependencies Run the \"install dependencies\" VS Code task Build the workspace Run the \"Build\" VS Code task, AKA Ctrl + Shift + B Source the overlay Run the srcnew terminal command Create a package with a node Run the \"new ament_(python|cmake) package with a node\" VS Code task Tutorials \u00b6 We encourage all software members to work through the tutorials listed below in order. For tutorials that have both C++ and Python versions, NET members should do the C++ version while CTRL and PATH members should do the Python version. CLI Tools Introducing turtlesim and rqt Understanding ROS 2 nodes Understanding ROS 2 topics Understanding ROS 2 services Understanding ROS 2 parameters Understanding ROS 2 actions Using rqt_console Recording and playing back data Client Libraries Creating a workspace Creating your first ROS 2 package Writing a simple publisher and subscriber (C++ or Python) Writing a simple service and client (C++ or Python) Using parameters in a class (C++ or Python) Getting started with ros2doctor Concepts \u00b6 We encourage all software members to read the following documentation on key ROS concepts: About logging and logger configuration ROS 1 Bridge \u00b6 There are two major versions of ROS, aptly named ROS 1 and ROS 2. Our previous project, Raye, uses ROS 1 because it was the only version available during her design process. Our new project will use ROS 2, a complete re-design of the framework that tackles the shortcomings of ROS 1 to bring it up to industry needs and standards. 3 If you are curious about the changes made in ROS 2 compared to 1, this article is a worthwhile read. ROS 2 includes the ROS 1 Bridge, a collection of packages that can be installed alongside ROS 1 to help migrate code from ROS 1 to ROS 2. As we will be reusing parts of Raye's codebase, it is essential to know how to use these packages. Until we are completely done with Raye, our preconfigured workspace will have ROS 1, ROS 1 Bridge, and ROS 2 installed. We encourage all software members work through the ROS 1 Bridge README . For PATH members, the Migrating launch files from ROS 1 to ROS 2 page will be a helpful reference when we do so. https://docs.ros.org/en/humble/index.html \u21a9 https://www.toptal.com/robotics/introduction-to-robot-operating-system \u21a9 https://ubuntu.com/robotics/what-is-ros \u21a9","title":"Robot Operating System"},{"location":"reference/ros/#robot-operating-system","text":"Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. 1 It provides functionality for hardware abstraction, device drivers, communication between processes over multiple machines, tools for testing and visualization, and much more. 2 We use ROS because it is open-source, language-agnostic, and built with cross-collaboration in mind. It enables our subteams to work independently on well-defined components of our software system without having to worry about the hardware it runs on or the implementation of other components. The official ROS 2 documentation contains everything you need to get started using ROS. From it we have hand-picked the resources that are most relevant to our current and expected future usage of ROS assuming that you use our preconfigured workspace . To run our software on your device without our workspace, you would have to install ROS and the dependencies that are in our Docker images yourself.","title":"Robot Operating System"},{"location":"reference/ros/#workspace-configuration","text":"To get our workspace configuration running on your computer: Set it up by following the setup instructions Uncomment the ROS 2 tutorials section in .devcontainer/Dockerfile , then run the \"Remote-Containers: Rebuild Container\" VS Code command, to install the tutorials' dependencies Uncomment the ROS 2 tutorials section in src/new_project.repos , then run the \"setup\" VS Code task, to clone the repositories used in the tutorials Our workspace configuration contains easier methods of accomplishing some of the tutorial steps, or eliminates the need for them altogether. Tutorial sailbot_workspace Install a package All packages used in the tutorials are already installed (step 2 above) Clone a sample repo (ros_tutorials) ros_tutorials is already cloned (step 3 above) Resolve dependencies Run the \"install dependencies\" VS Code task Build the workspace Run the \"Build\" VS Code task, AKA Ctrl + Shift + B Source the overlay Run the srcnew terminal command Create a package with a node Run the \"new ament_(python|cmake) package with a node\" VS Code task","title":"Workspace Configuration"},{"location":"reference/ros/#tutorials","text":"We encourage all software members to work through the tutorials listed below in order. For tutorials that have both C++ and Python versions, NET members should do the C++ version while CTRL and PATH members should do the Python version. CLI Tools Introducing turtlesim and rqt Understanding ROS 2 nodes Understanding ROS 2 topics Understanding ROS 2 services Understanding ROS 2 parameters Understanding ROS 2 actions Using rqt_console Recording and playing back data Client Libraries Creating a workspace Creating your first ROS 2 package Writing a simple publisher and subscriber (C++ or Python) Writing a simple service and client (C++ or Python) Using parameters in a class (C++ or Python) Getting started with ros2doctor","title":"Tutorials"},{"location":"reference/ros/#concepts","text":"We encourage all software members to read the following documentation on key ROS concepts: About logging and logger configuration","title":"Concepts"},{"location":"reference/ros/#ros-1-bridge","text":"There are two major versions of ROS, aptly named ROS 1 and ROS 2. Our previous project, Raye, uses ROS 1 because it was the only version available during her design process. Our new project will use ROS 2, a complete re-design of the framework that tackles the shortcomings of ROS 1 to bring it up to industry needs and standards. 3 If you are curious about the changes made in ROS 2 compared to 1, this article is a worthwhile read. ROS 2 includes the ROS 1 Bridge, a collection of packages that can be installed alongside ROS 1 to help migrate code from ROS 1 to ROS 2. As we will be reusing parts of Raye's codebase, it is essential to know how to use these packages. Until we are completely done with Raye, our preconfigured workspace will have ROS 1, ROS 1 Bridge, and ROS 2 installed. We encourage all software members work through the ROS 1 Bridge README . For PATH members, the Migrating launch files from ROS 1 to ROS 2 page will be a helpful reference when we do so. https://docs.ros.org/en/humble/index.html \u21a9 https://www.toptal.com/robotics/introduction-to-robot-operating-system \u21a9 https://ubuntu.com/robotics/what-is-ros \u21a9","title":"ROS 1 Bridge"},{"location":"reference/github/workflow/","text":"Development Workflow Overview \u00b6 graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections. Version control: Git \u00b6 We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git. Remote server: GitHub \u00b6 We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#development-workflow-overview","text":"graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections.","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#version-control-git","text":"We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git.","title":"Version control: Git"},{"location":"reference/github/workflow/#remote-server-github","text":"We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Remote server: GitHub"},{"location":"reference/github/workflow/branches/","text":"Developing on Branches \u00b6 We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation . Creating a branch \u00b6 When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main . Branch naming convention \u00b6 When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: <github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice. Tracking and committing changes \u00b6 All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name> Merging branches \u00b6 There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened. Resolving merge conflicts \u00b6 Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#developing-on-branches","text":"We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation .","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#creating-a-branch","text":"When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main .","title":"Creating a branch"},{"location":"reference/github/workflow/branches/#branch-naming-convention","text":"When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: <github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice.","title":"Branch naming convention"},{"location":"reference/github/workflow/branches/#tracking-and-committing-changes","text":"All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name>","title":"Tracking and committing changes"},{"location":"reference/github/workflow/branches/#merging-branches","text":"There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened.","title":"Merging branches"},{"location":"reference/github/workflow/branches/#resolving-merge-conflicts","text":"Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Resolving merge conflicts"},{"location":"reference/github/workflow/issues/","text":"Creating Issues \u00b6 GitHub issues lets us plan and track our work on GitHub. Getting started with issue templates \u00b6 An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies! Adding issues to a project \u00b6 We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case). Adding issues to a milestone \u00b6 We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository. Labelling issues \u00b6 GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well! Adding assignees \u00b6 Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people. Submit the issue \u00b6 Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#creating-issues","text":"GitHub issues lets us plan and track our work on GitHub.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#getting-started-with-issue-templates","text":"An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies!","title":"Getting started with issue templates"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-project","text":"We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case).","title":"Adding issues to a project"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-milestone","text":"We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository.","title":"Adding issues to a milestone"},{"location":"reference/github/workflow/issues/#labelling-issues","text":"GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well!","title":"Labelling issues"},{"location":"reference/github/workflow/issues/#adding-assignees","text":"Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people.","title":"Adding assignees"},{"location":"reference/github/workflow/issues/#submit-the-issue","text":"Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Submit the issue"},{"location":"reference/github/workflow/pr/","text":"Pull Requests \u00b6 Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small. Creating a pull request \u00b6 To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards. Merging into main \u00b6 Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge : Reviewing a pull request \u00b6 A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#pull-requests","text":"Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small.","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#creating-a-pull-request","text":"To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards.","title":"Creating a pull request"},{"location":"reference/github/workflow/pr/#merging-into-main","text":"Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge :","title":"Merging into main"},{"location":"reference/github/workflow/pr/#reviewing-a-pull-request","text":"A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Reviewing a pull request"},{"location":"reference/python/","text":"Getting Started \u00b6 We use Python 3 to write the majority of our software at UBC Sailbot. Pathfinding and Controls mainly use Python 3, so it is critical that you are familiar with the language if you are on one of these sub-teams. Python tutorials \u00b6 We understand that not everyone who joins Sailbot has Python in their toolkit, nor do we expect it either! Whether you are learning Python for the first time or you just want to brush up, we have provided some resources below. You will not learn absolutely everything from the resources below, but it is a good starting point. You will mostly learn through doing, as you would with most technical skills! Resource Description The Python Tutorial The official python tutorial. Good if you have some time on your hands and you are a completionist. Sections 1 - 5 and 9 are the most relevant. w3schools Tutorial Good if you want a more brief introduction to Python. It breaks down a lot of concepts into sections. Everything up to Python Classes/Objects is relevant. YouTube Tutorial If you like video tutorials, then we recommend this tutorial. This video is about 5 hours long, but it pretty much covers everything that you'll need to know for Python and there are some hands on projects. Shorter YouTube Tutorial A shorter alternative YouTube tutorial condensed into 1 hour. It covers less material but still covers many of the essentials. CodingBat Practice Good resource to put your Python skills to practice on some simple coding problems. Note that this resource does not teach you python. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"Getting Started"},{"location":"reference/python/#getting-started","text":"We use Python 3 to write the majority of our software at UBC Sailbot. Pathfinding and Controls mainly use Python 3, so it is critical that you are familiar with the language if you are on one of these sub-teams.","title":"Getting Started"},{"location":"reference/python/#python-tutorials","text":"We understand that not everyone who joins Sailbot has Python in their toolkit, nor do we expect it either! Whether you are learning Python for the first time or you just want to brush up, we have provided some resources below. You will not learn absolutely everything from the resources below, but it is a good starting point. You will mostly learn through doing, as you would with most technical skills! Resource Description The Python Tutorial The official python tutorial. Good if you have some time on your hands and you are a completionist. Sections 1 - 5 and 9 are the most relevant. w3schools Tutorial Good if you want a more brief introduction to Python. It breaks down a lot of concepts into sections. Everything up to Python Classes/Objects is relevant. YouTube Tutorial If you like video tutorials, then we recommend this tutorial. This video is about 5 hours long, but it pretty much covers everything that you'll need to know for Python and there are some hands on projects. Shorter YouTube Tutorial A shorter alternative YouTube tutorial condensed into 1 hour. It covers less material but still covers many of the essentials. CodingBat Practice Good resource to put your Python skills to practice on some simple coding problems. Note that this resource does not teach you python. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"Python tutorials"},{"location":"reference/python/conventions/","text":"Conventions \u00b6 At UBC Sailbot, we follow standards in how we code to maintain a clean and comprehensible codebase. This page addresses what conventions we use specifically when programming in Python. Style guide \u00b6 To ensure that the codebase stays clean, we use flake8 , which is a tool for style guide enforcement mostly based off pep8 . To automate most of this process, we use autopep8 , which is a tool that resolves most style issues. However, there will be some issues that must be resolved by you! Refer to this guide on how to write readable code in python with the pep8 style guide. Note Our CI automatically checks that your code follows the pep8 standard. If it does not, your pull requests will be blocked from being merged until those issues are resolved! Documentation \u00b6 Code is written once and read a thousand times, so it is important to provide good documentation for current and future members of the software team. The major things that we document in our code are: Classes and Objects: What does it represent? What is it used for? What are its member variables? What are they used for? Functions: What are the inputs and outputs? What is the overall behavior and purpose of the function? Code: Is a line of code obscure and/or not clear? Add an inline comment to clear things up. Break down a large process. Ideally, the third point should be avoided as much as possible since we would want our code to be self explanatory. It should be done only when absolutely necessary. Generating docstrings \u00b6 We use a vscode extension called autoDocstring which autogenerates docstrings that we use to document our code. To install this extension, go to the Extensions tab in vscode and search autoDocstring in the marketplace. To generate docstrings, type \"\"\" at the beginning of the function that you want to document and the template will be generated for you! Note The autoDocstring extension only works for functions. It does not work for classes and objects, so documenting these will have to be done manually. Be sure to follow the same format used by functions. Example on documentation \u00b6 It's hard to imagine what good documentation looks like. We provide a few examples below of documenting code using the autoDocstring extension. Documentation example on a function def inner_product ( v1 , v2 ): \"\"\" Computes the inner product between two 1D real vectors. Input vectors should have the same dimensions. Args: v1 (List[float]): The first vector of real numbers. v2 (List[float]): The second vector of real numbers. Returns: float : The inner product between v1 and v2 \"\"\" assert ( len ( v1 ) == len ( v2 )), \"Input lists must have same length\" # Iterate through elementwise pairs summation = 0 for e1 , e2 in zip ( v1 , v2 ): summation += ( e1 * e2 ) return float ( summation ) Documentation example with a stack class Stack : \"\"\" This class represents a stack, which is an abstract data type that serves as a collection of elements. The stack is a LIFO datastructure defined by two main operations: Push and Pop. Attributes: __stack (List[Any]): A list containing the elements on the stack. \"\"\" def __init__ ( self ): \"\"\" Initializes the Stack object. \"\"\" self . __stack = [] def push ( self , element ): \"\"\" Pushes an element to the top of the stack. Args: element (Any): The element to be pushed on to the stack. \"\"\" self . __stack . append ( element ) def pop ( self ): \"\"\" Removes the element at the top of the stack and returns it. If the stack is empty, then None is returned. Returns: Any, NoneType: The element at the top of the stack. \"\"\" if self . is_empty (): return None else : return self . __stack . pop () def is_empty ( self ): \"\"\" Determines whether the stack is empty or not. Returns: bool: Returns True if the stack is empty, and False otherwise. \"\"\" empty = ( len ( self . __stack ) == 0 ) return empty def __len__ ( self ): \"\"\" Gets the number of elements on the stack. Returns: int: The number of elements on the stack. \"\"\" length = len ( self . __stack ) return length","title":"Conventions"},{"location":"reference/python/conventions/#conventions","text":"At UBC Sailbot, we follow standards in how we code to maintain a clean and comprehensible codebase. This page addresses what conventions we use specifically when programming in Python.","title":"Conventions"},{"location":"reference/python/conventions/#style-guide","text":"To ensure that the codebase stays clean, we use flake8 , which is a tool for style guide enforcement mostly based off pep8 . To automate most of this process, we use autopep8 , which is a tool that resolves most style issues. However, there will be some issues that must be resolved by you! Refer to this guide on how to write readable code in python with the pep8 style guide. Note Our CI automatically checks that your code follows the pep8 standard. If it does not, your pull requests will be blocked from being merged until those issues are resolved!","title":"Style guide"},{"location":"reference/python/conventions/#documentation","text":"Code is written once and read a thousand times, so it is important to provide good documentation for current and future members of the software team. The major things that we document in our code are: Classes and Objects: What does it represent? What is it used for? What are its member variables? What are they used for? Functions: What are the inputs and outputs? What is the overall behavior and purpose of the function? Code: Is a line of code obscure and/or not clear? Add an inline comment to clear things up. Break down a large process. Ideally, the third point should be avoided as much as possible since we would want our code to be self explanatory. It should be done only when absolutely necessary.","title":"Documentation"},{"location":"reference/python/conventions/#generating-docstrings","text":"We use a vscode extension called autoDocstring which autogenerates docstrings that we use to document our code. To install this extension, go to the Extensions tab in vscode and search autoDocstring in the marketplace. To generate docstrings, type \"\"\" at the beginning of the function that you want to document and the template will be generated for you! Note The autoDocstring extension only works for functions. It does not work for classes and objects, so documenting these will have to be done manually. Be sure to follow the same format used by functions.","title":"Generating docstrings"},{"location":"reference/python/conventions/#example-on-documentation","text":"It's hard to imagine what good documentation looks like. We provide a few examples below of documenting code using the autoDocstring extension. Documentation example on a function def inner_product ( v1 , v2 ): \"\"\" Computes the inner product between two 1D real vectors. Input vectors should have the same dimensions. Args: v1 (List[float]): The first vector of real numbers. v2 (List[float]): The second vector of real numbers. Returns: float : The inner product between v1 and v2 \"\"\" assert ( len ( v1 ) == len ( v2 )), \"Input lists must have same length\" # Iterate through elementwise pairs summation = 0 for e1 , e2 in zip ( v1 , v2 ): summation += ( e1 * e2 ) return float ( summation ) Documentation example with a stack class Stack : \"\"\" This class represents a stack, which is an abstract data type that serves as a collection of elements. The stack is a LIFO datastructure defined by two main operations: Push and Pop. Attributes: __stack (List[Any]): A list containing the elements on the stack. \"\"\" def __init__ ( self ): \"\"\" Initializes the Stack object. \"\"\" self . __stack = [] def push ( self , element ): \"\"\" Pushes an element to the top of the stack. Args: element (Any): The element to be pushed on to the stack. \"\"\" self . __stack . append ( element ) def pop ( self ): \"\"\" Removes the element at the top of the stack and returns it. If the stack is empty, then None is returned. Returns: Any, NoneType: The element at the top of the stack. \"\"\" if self . is_empty (): return None else : return self . __stack . pop () def is_empty ( self ): \"\"\" Determines whether the stack is empty or not. Returns: bool: Returns True if the stack is empty, and False otherwise. \"\"\" empty = ( len ( self . __stack ) == 0 ) return empty def __len__ ( self ): \"\"\" Gets the number of elements on the stack. Returns: int: The number of elements on the stack. \"\"\" length = len ( self . __stack ) return length","title":"Example on documentation"},{"location":"reference/python/virtual-environments/","text":"Virtual Environments \u00b6 The Python virtual environment is a tool for dependency management and project isolation. They solve many common issues, including: Dependency Resolution: A project might want a package with version A while another project might want a package with version B. With a virtual environment, you can separate which packages that you want to use for a given project. Project Isolation: The environment for your project is self-contained and reproducible by capturing all dependencies in a configuration file. Housekeeping: Virtual environments allow you to keep your global workspace tidy. There are two main methods of creating virtual environments: virtualenv and Anaconda . Each have their own benefits and drawbacks. Here are some differences between the two: Virtualenv Anaconda Environment files are local. Environment files are available globally. Must activate environment by giving the path. Can activate the environment without knowing the path. Can only use pip to install packages. Can either use pip or built-in conda package manager. Installation is very simple. Installation takes more effort. Can only install python packages. In addition to packages, you can download many data science tools. We recommend virtualenv over Anaconda because of its simplicity. However, feel free to appeal to your preferences. Installation \u00b6 Virtualenv Anaconda If you already have python and the pip package manager installed, just execute the following: Using pip to install virtualenv pip install virtualenv Go to the official Anaconda website and follow the installation instructions for your operating system. Using virtual environments \u00b6 The name of a virtual environment is configurable. For the purposes of this site, we will use env as the environment name unless specified otherwise. Creating a virtual environment \u00b6 Virtualenv Anaconda Since virtualenv creates the environment directory in a specific location, make sure that you are in the located in the project that you want to work on. Create virtual environment with virtualenv # Go to desired location cd <PATH TO DIRECTORY> # Create the environment with the name env python3 -m venv env Verify that your environment is created by examining your current directory and look for the directory that matches the name of your virtual environment. Since the environment will be available globally, there is no need to go to a specific location to create it. Create virtual environment with Anaconda # Create environment with name env and python version conda env create -n env python = <PYTHON VERSION NUM> If you don't specify a python version, the default is the latest version. Verify that your environment is created by executing conda env list . Activating the virtual environment \u00b6 To use the virtual environment, you must activate it. Virtualenv Anaconda Windows MacOS Linux Activation for Windows env\\Scripts\\activate Activation for MacOS source env/bin/activate Activation for Linux source env/bin/activate Activation for Anaconda conda activate env After activating your virtual environment, you might see (env) on your terminal before or after your current line. Now you are in your virtual environment! Installing dependencies \u00b6 Any dependencies that you install while your virtual environment is activated are only available in your virtual environment. If you deactivate your environment and try to use those dependencies, you will find that you will get errors because they will not be found unless you install those dependencies in the other environment! Virtualenv Anaconda Use the pip package manager to install python dependencies. Install dependency with pip pip install <PACKAGE> Option 1: pip Option 2: conda Use the pip package manager to install python dependencies. Install dependency with pip # Install pip using conda conda install pip # Install python packages using pip pip install <PACKAGE> Use the built-in conda package manager to install python dependencies. Install dependency with conda conda install -c <CHANNEL> <PACKAGE> Sometimes, installing a package like this simply won't work because you are not installing from the correct channel . You usually will have to google the command to use in order to install your package correctly because it usually comes from a specific channel that you don't know about. Some common channels to try are: conda-forge anaconda bioconda r Deactivating the virtual environment \u00b6 When you are finished using your virtual environment, you will need to deactivate it. Virtualenv Anaconda Deactivate virtualenv environment deactivate Deactivate anaconda environment conda deactivate Reproducing your virtual environment \u00b6 When you want to share your code with others, it is important for others to be able to reproduce the environment that you worked in. We discuss two topics in this section: exporting your environment and reproducing the environment. Exporting your virtual environment \u00b6 In order to reproduce your virtual environment, you need to export some information about your environment. Be sure to follow the instructions below while your environment is activated . Virtualenv Anaconda You will create a requirements.txt file, which essentially lists all of your python dependencies in one file: Creating requirements file pip freeze > requirements.txt The pip freeze command prints all of your pip dependencies, and > requirements.txt redirects the output to a text file. Anaconda uses configuration files to recreate an environment. Windows MacOS Linux Execute the following command to create a file called environment.yml : Create config file conda env export > environment.yml Then, open the environment.yml file and delete the line with prefix: . Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Reproducing the environment \u00b6 You can reproduce your virtual environment when given the information about it. The steps above tell you how to extract the information, and now we will use that information to recreate the virtual environment. Remember to deactivate the current environment before making a new environment. Virtualenv Anaconda We use the requirements.txt file that we generated earlier to recreate the environment. Recreate virtualenv environment # Create the new environment python -m venv <NEW ENV NAME> # Activate the environment source <NEW ENV NAME>/bin/activate # Install dependencies pip install -r <PATH TO requirements.txt file> We use the environment.yml file that we generated earlier to recreate the environment. Recreate the conda environment # Create the new environment with the dependencies conda env create -f <PATH TO environment.yml> -n <ENV NAME> Official references \u00b6 In this section, we summarized what virtual environments are, why they are used, and how to use them. We did not cover all of the functions of virtual environments, but feel free to consult the official references to learn about virtual environments more in depth. Virtualenv Reference Anaconda Reference","title":"Virtual Environments"},{"location":"reference/python/virtual-environments/#virtual-environments","text":"The Python virtual environment is a tool for dependency management and project isolation. They solve many common issues, including: Dependency Resolution: A project might want a package with version A while another project might want a package with version B. With a virtual environment, you can separate which packages that you want to use for a given project. Project Isolation: The environment for your project is self-contained and reproducible by capturing all dependencies in a configuration file. Housekeeping: Virtual environments allow you to keep your global workspace tidy. There are two main methods of creating virtual environments: virtualenv and Anaconda . Each have their own benefits and drawbacks. Here are some differences between the two: Virtualenv Anaconda Environment files are local. Environment files are available globally. Must activate environment by giving the path. Can activate the environment without knowing the path. Can only use pip to install packages. Can either use pip or built-in conda package manager. Installation is very simple. Installation takes more effort. Can only install python packages. In addition to packages, you can download many data science tools. We recommend virtualenv over Anaconda because of its simplicity. However, feel free to appeal to your preferences.","title":"Virtual Environments"},{"location":"reference/python/virtual-environments/#installation","text":"Virtualenv Anaconda If you already have python and the pip package manager installed, just execute the following: Using pip to install virtualenv pip install virtualenv Go to the official Anaconda website and follow the installation instructions for your operating system.","title":"Installation"},{"location":"reference/python/virtual-environments/#using-virtual-environments","text":"The name of a virtual environment is configurable. For the purposes of this site, we will use env as the environment name unless specified otherwise.","title":"Using virtual environments"},{"location":"reference/python/virtual-environments/#creating-a-virtual-environment","text":"Virtualenv Anaconda Since virtualenv creates the environment directory in a specific location, make sure that you are in the located in the project that you want to work on. Create virtual environment with virtualenv # Go to desired location cd <PATH TO DIRECTORY> # Create the environment with the name env python3 -m venv env Verify that your environment is created by examining your current directory and look for the directory that matches the name of your virtual environment. Since the environment will be available globally, there is no need to go to a specific location to create it. Create virtual environment with Anaconda # Create environment with name env and python version conda env create -n env python = <PYTHON VERSION NUM> If you don't specify a python version, the default is the latest version. Verify that your environment is created by executing conda env list .","title":"Creating a virtual environment"},{"location":"reference/python/virtual-environments/#activating-the-virtual-environment","text":"To use the virtual environment, you must activate it. Virtualenv Anaconda Windows MacOS Linux Activation for Windows env\\Scripts\\activate Activation for MacOS source env/bin/activate Activation for Linux source env/bin/activate Activation for Anaconda conda activate env After activating your virtual environment, you might see (env) on your terminal before or after your current line. Now you are in your virtual environment!","title":"Activating the virtual environment"},{"location":"reference/python/virtual-environments/#installing-dependencies","text":"Any dependencies that you install while your virtual environment is activated are only available in your virtual environment. If you deactivate your environment and try to use those dependencies, you will find that you will get errors because they will not be found unless you install those dependencies in the other environment! Virtualenv Anaconda Use the pip package manager to install python dependencies. Install dependency with pip pip install <PACKAGE> Option 1: pip Option 2: conda Use the pip package manager to install python dependencies. Install dependency with pip # Install pip using conda conda install pip # Install python packages using pip pip install <PACKAGE> Use the built-in conda package manager to install python dependencies. Install dependency with conda conda install -c <CHANNEL> <PACKAGE> Sometimes, installing a package like this simply won't work because you are not installing from the correct channel . You usually will have to google the command to use in order to install your package correctly because it usually comes from a specific channel that you don't know about. Some common channels to try are: conda-forge anaconda bioconda r","title":"Installing dependencies"},{"location":"reference/python/virtual-environments/#deactivating-the-virtual-environment","text":"When you are finished using your virtual environment, you will need to deactivate it. Virtualenv Anaconda Deactivate virtualenv environment deactivate Deactivate anaconda environment conda deactivate","title":"Deactivating the virtual environment"},{"location":"reference/python/virtual-environments/#reproducing-your-virtual-environment","text":"When you want to share your code with others, it is important for others to be able to reproduce the environment that you worked in. We discuss two topics in this section: exporting your environment and reproducing the environment.","title":"Reproducing your virtual environment"},{"location":"reference/python/virtual-environments/#exporting-your-virtual-environment","text":"In order to reproduce your virtual environment, you need to export some information about your environment. Be sure to follow the instructions below while your environment is activated . Virtualenv Anaconda You will create a requirements.txt file, which essentially lists all of your python dependencies in one file: Creating requirements file pip freeze > requirements.txt The pip freeze command prints all of your pip dependencies, and > requirements.txt redirects the output to a text file. Anaconda uses configuration files to recreate an environment. Windows MacOS Linux Execute the following command to create a file called environment.yml : Create config file conda env export > environment.yml Then, open the environment.yml file and delete the line with prefix: . Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml","title":"Exporting your virtual environment"},{"location":"reference/python/virtual-environments/#reproducing-the-environment","text":"You can reproduce your virtual environment when given the information about it. The steps above tell you how to extract the information, and now we will use that information to recreate the virtual environment. Remember to deactivate the current environment before making a new environment. Virtualenv Anaconda We use the requirements.txt file that we generated earlier to recreate the environment. Recreate virtualenv environment # Create the new environment python -m venv <NEW ENV NAME> # Activate the environment source <NEW ENV NAME>/bin/activate # Install dependencies pip install -r <PATH TO requirements.txt file> We use the environment.yml file that we generated earlier to recreate the environment. Recreate the conda environment # Create the new environment with the dependencies conda env create -f <PATH TO environment.yml> -n <ENV NAME>","title":"Reproducing the environment"},{"location":"reference/python/virtual-environments/#official-references","text":"In this section, we summarized what virtual environments are, why they are used, and how to use them. We did not cover all of the functions of virtual environments, but feel free to consult the official references to learn about virtual environments more in depth. Virtualenv Reference Anaconda Reference","title":"Official references"}]}