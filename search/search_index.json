{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UBCSailbot Software Team Docs","text":""},{"location":"current/overview/","title":"Current Project Overview","text":""},{"location":"current/sailbot_workspace/deployment/","title":"Deployment","text":"<p>Source code</p> <p>The source code for deployment can be found in the sailbot_workspace GitHub repository. Its README has been copied below.</p>"},{"location":"current/sailbot_workspace/deployment/#deployment","title":"Deployment","text":"<p>Deploying our software to our autonomous sailboat's main computer.</p>"},{"location":"current/sailbot_workspace/deployment/#scripts","title":"Scripts","text":""},{"location":"current/sailbot_workspace/deployment/#start_containersh","title":"<code>start_container.sh</code>","text":"<p>Runs the <code>base</code> image. A new container is created every time this is run. The default container name is <code>sailbot_deployment_container</code>. Container names are unique, so if you want to use multiple deployment containers (e.g., from different branches) you will have to update the variable <code>CONTAINER_NAME</code> in the script.</p> <p>Usage:</p> <ul> <li>Runs the base image used by the Dev Container by default: <code>./start_container.sh</code></li> <li>Run a specific version of the base image by specifying its ID: <code>./start_container.sh &lt;IMAGE_ID&gt;</code></li> </ul>"},{"location":"current/sailbot_workspace/deployment/#setup_bootsh","title":"<code>setup_boot.sh</code>","text":"<p>Configures programs and scripts that need to run when the main computer boots. Only needs to be run once unless the script is updated. Does not need to be rerun if any scripts or programs it targets are updated, with the exception of renaming or moving the file.</p> <p>Usage:</p> <ul> <li>Must be run as root</li> <li><code>sudo ./setup_boot.sh</code></li> </ul>"},{"location":"current/sailbot_workspace/deployment/#deployment-container-commands","title":"Deployment container commands","text":"<ul> <li>Exit out of a container: <code>exit</code></li> <li>Start an existing container: <code>docker start -ia &lt;container name&gt;</code></li> <li>Delete an existing container: <code>docker rm &lt;container name&gt;</code></li> <li>Find the container ID of a container: <code>docker ps -a</code></li> </ul>"},{"location":"current/sailbot_workspace/deployment/#deploy-software","title":"Deploy software","text":"<p>These commands are run in the in the root directory of this repository</p> <ol> <li>Run the setup script: <code>./setup.sh</code></li> <li>Run the quick build script: <code>./quick_build.sh</code></li> </ol>"},{"location":"current/sailbot_workspace/deployment/#develop-software","title":"Develop software","text":"<p>The deployment container isn't intended for development, but if you discover a bug and want to quickly push a fix:</p> <ol> <li>Fix the issue in a terminal outside the deployment container</li> <li>Run the software to verify your fix in a terminal inside the deployment container</li> <li>Commit and push your fix in a terminal outside the deployment container</li> </ol>"},{"location":"current/sailbot_workspace/docker_images/","title":"Sailbot Workspace Docker Images","text":"<p>A table detailing the Docker images used to create the Dev Container can be found below. Click on an image to learn more about its features and how to update it.</p> Image Parent Image Source Code Why it is Rebuilt Where it is Built <code>pre-base</code> Ubuntu 22.04 <code>pre-base.Dockerfile</code> To update ROS or OMPL Personal computer <code>base</code> <code>pre-base</code> <code>base-dev.Dockerfile</code> To update core dependencies Workflow dispatch <code>dev</code> <code>base</code> <code>base-dev.Dockerfile</code> To update development dependencies Workflow dispatch Dev Container <code>dev</code> <code>Dockerfile</code> To update Dev Container configuration VS Code"},{"location":"current/sailbot_workspace/overview/","title":"Overview","text":"<p>Source code</p> <p>The source code for Sailbot Workspace can be found in the sailbot_workspace GitHub repository. Its README has been copied below.</p>"},{"location":"current/sailbot_workspace/overview/#sailbot-workspace","title":"Sailbot Workspace","text":"<p>This repository will get you set up to develop UBCSailbot's software on VS Code. It is based on athackst's vscode_ros2_workspace. See their write-up for a more in-depth look on how this workspace functions.</p>"},{"location":"current/sailbot_workspace/overview/#features","title":"Features","text":""},{"location":"current/sailbot_workspace/overview/#style","title":"Style","text":"<p>ROS2-approved formatters are included in the IDE.</p> <ul> <li>C++ uncrustify; config from <code>ament_uncrustify</code></li> <li>Python autopep8; vscode settings consistent with the style guide</li> </ul>"},{"location":"current/sailbot_workspace/overview/#tasks","title":"Tasks","text":"<p>There are many pre-defined tasks. See our workspace file for a complete listing. Bring up the task menu by typing \"Tasks: Run Task\" in the command pallete, or creating a keyboard shortcut for <code>workbench.action.tasks.runTask</code>.</p>"},{"location":"current/sailbot_workspace/overview/#debugging-wip","title":"Debugging (WIP)","text":"<p>This repository has debug configurations for Python files and C++ programs. See our workspace file for configuration details. Bring up the debug configurations menu by typing \"debug \" in the command palette without the \"&gt;\" prefix, or select one from the Run and Debug view.</p>"},{"location":"current/sailbot_workspace/overview/#continuous-integration","title":"Continuous Integration","text":"<p>This repository also has continuous integration that lints and tests our code. See <code>.github/workflows/</code> for the configuration files.</p>"},{"location":"current/sailbot_workspace/overview/#customization","title":"Customization","text":"<p>This repository supports user-specific configuration files. To set this up see how to use your personal configuration file in the Dev Container.</p>"},{"location":"current/sailbot_workspace/overview/#run-rayes-software","title":"Run Raye's Software","text":"<p>Raye was our previous project. Her software can be run in the <code>raye</code> branch. The initial differences between the <code>main</code> and <code>raye</code> branches are summarized in this PR.</p>"},{"location":"current/sailbot_workspace/overview/#documentation","title":"Documentation","text":"<p>Further documentation, including setup and run instructions, can be found on our Docs website.</p>"},{"location":"current/sailbot_workspace/run/","title":"Sailbot Workspace Run Instructions","text":""},{"location":"current/sailbot_workspace/run/#1-rebuild-the-dev-container","title":"1. Rebuild the Dev Container","text":"<p>You can skip this step if none of the files in <code>.devcontainer/</code> were modified since the Dev Container was last built.</p> <p>These file may be modified if you:</p> <ol> <li><code>git pull</code></li> <li>Switch branches</li> <li>Update a file in <code>.devcontainer/</code> yourself</li> </ol> <p>VS Code may prompt you to rebuild the Dev Container when these files are modified, but it doesn't do so 100% of the time.</p> <ol> <li>Run the <code>Dev Containers: Rebuild Container</code> command in the    VS Code command palette</li> </ol>"},{"location":"current/sailbot_workspace/run/#2-run-the-setup-vs-code-task","title":"2. Run the <code>setup</code> VS Code task","text":"<p>The <code>setup</code> task imports the ROS packages and install their dependencies. You can skip this step if you ran this task before and haven't changed ROS package dependencies since.</p> <ol> <li>Run the <code>Tasks: Run Task</code> command in the    VS Code command palette</li> <li> <p>Select <code>setup</code> from the dropdown menu</p> Can't see the <code>setup</code> task <p>If you can't see the <code>setup</code> task, close and reopen VS Code before rerunning the <code>Tasks: Run Task</code> command. This may occur when Sailbot Workspace is opened for the first time.</p> </li> </ol>"},{"location":"current/sailbot_workspace/run/#3-build-the-ros-packages","title":"3. Build the ROS packages","text":"<p>You can skip this step if no modifications were made to C++ code, custom msgs, or compiled resources.</p> <ol> <li>Run the <code>Build</code> VS Code task: Ctrl+Shift+B<ul> <li>On macOS the shortcut is Cmd+Shift+B</li> </ul> </li> </ol>"},{"location":"current/sailbot_workspace/run/#4-run-the-ros-program","title":"4. Run the ROS program","text":"<p>Run a ROS launch file or package-specific executable with <code>ros2 launch ...</code> or <code>ros2 run ...</code>, respectively.</p> Running GUI applications on macOS <p>If you want to run GUI applications on macOS, ensure that XQuartz is running.</p>"},{"location":"current/sailbot_workspace/run/#troubleshooting","title":"Troubleshooting","text":"<p>If you are having some trouble running Raye's software, here are some things you can try:</p> <p>ROS:</p> <ul> <li>Run the <code>clean</code> VS Code task to clean your build</li> <li>Run the <code>purge</code> VS Code task to delete all generated files in the workspace</li> </ul> <p>Dev Container:</p> <ul> <li>Run the <code>Dev Containers: Rebuild Container</code> command in the   VS Code command palette   to rebuild the Dev Container</li> </ul> <p>VS Code:</p> <ul> <li>Close and reopen the VS Code</li> <li>Update VS Code and its extensions</li> </ul> <p>Docker:</p> <ul> <li>Run <code>docker system prune</code> to remove all unused containers, networks, images (both dangling and unreferenced)<ul> <li>Add <code>--all</code> to additionally remove unused images</li> <li>Add <code>--volumes</code> to additionally remove volumes</li> <li>Run <code>docker rmi -f $(docker images -aq)</code> to remove all images</li> </ul> </li> </ul>"},{"location":"current/sailbot_workspace/run/#run-rayes-software","title":"Run Raye's Software","text":"<p>Raye was our previous project. Her software can be run in the <code>raye</code> branch:</p> <ol> <li>Switch to the <code>raye</code> branch: <code>git switch raye</code></li> <li>Rebuild the Dev Container: run the <code>Dev Containers: Rebuild Container</code> command in the    VS Code command palette</li> </ol> <p><code>raye</code> branch disclaimers</p> <ol> <li>Since <code>raye</code> (and Raye's codebase in general) is not in active development, it may not be 100% functional    or contain all the features in <code>main</code></li> <li><code>raye</code> is more memory intensive than <code>main</code> because the parent image of its Dev Container is much larger;    this may lead to worse performance</li> </ol>"},{"location":"current/sailbot_workspace/run/#build-rayes-ros-packages","title":"Build Raye's ROS packages","text":"<p>To build Raye's ROS packages, run the following commands:</p> <pre><code>roscd\ncatkin_make\n</code></pre>"},{"location":"current/sailbot_workspace/run/#run-packages-from-different-workspaces","title":"Run packages from different workspaces","text":"<p>The <code>raye</code> branch has two ROS workspaces: one for Raye and one for the new project. To run ROS packages, you will have to source the overlay of the workspace that it is in:</p> New ProjectRaye <pre><code>srcnew\n</code></pre> <pre><code>srcraye\n</code></pre> <p>Then you can run launch files or package-specific executables in that workspace with:</p> New ProjectRaye <p><code>ros2 launch ...</code> or <code>ros2 run ...</code>, respectively.</p> <p><code>roslaunch ...</code> or <code>rosrun ...</code>, respectively.</p>"},{"location":"current/sailbot_workspace/run/#rayes-known-issues","title":"Raye's known issues","text":"<p>Run commands for Raye packages are very slow</p> <p>On non-Ubuntu-based Linux operating systems, Run commands for Raye packages may take a long time to start-up. This is because the system has trouble resolving the local hostname.</p> <p>To resolve this bug, run the commands below in the Dev Container:</p> <pre><code>echo 'export ROS_HOSTNAME=localhost' &gt;&gt; ~/.bashrc\necho 'export ROS_MASTER_URI=http://localhost:11311' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"current/sailbot_workspace/setup/","title":"Sailbot Workspace Setup Instructions","text":"<p>This workspace can be run on Windows, Linux, or macOS, but is the easiest to set up and performs the best on Ubuntu and its derivatives.</p>"},{"location":"current/sailbot_workspace/setup/#1-set-up-prerequisites","title":"1. Set up prerequisites","text":""},{"location":"current/sailbot_workspace/setup/#docker","title":"Docker","text":"<p>Docker is a platform that uses OS-level virtualization1 to develop, ship, and run applications.2 We use it to separate our applications from our infrastructure2 so that we can update and version control our infrastructure for every use case (software members, CI, deployment) in one place: this repository.</p> <p>Docker Engine is a software used to run Docker. However, it can only be installed on Linux. Docker Desktop is a software used to run Docker in a VM,3 allowing it to be installed on Windows and macOS in addition to Linux.</p>  Windows macOS Linux <ol> <li> <p>Set up prerequisites, WSL and Ubuntu:</p> <ol> <li> <p>In PowerShell, run <code>wsl --install Ubuntu</code></p> Already installed WSL or Ubuntu? <p>If WSL or Ubuntu is already installed, ensure that they are up-to-date:</p> <ol> <li>Update WSL by running <code>wsl --update</code> in PowerShell</li> <li>Ensure that Ubuntu is WSL 2, not 1:<ol> <li>Check the WSL versions of Linux distributions with <code>wsl -l -v</code></li> <li>If Ubuntu's <code>VERSION</code> is 1, upgrade it to WSL 2 with <code>wsl --set-version Ubuntu 2</code></li> </ol> </li> </ol> </li> <li> <p>Open Ubuntu to set up or verify its configuration:</p> <ol> <li>If you are opening Ubuntu for the first time, a setup process will run; follow the prompts to finish setting it up</li> <li> <p>Run <code>whoami</code> to verify that it returns your Ubuntu username</p> <code>whoami</code> returns <code>root</code> <p>If <code>whoami</code> returns <code>root</code>:</p> <ol> <li>Create a non-root user with sudo privileges</li> <li>Change the default Ubuntu user to this newly-created user: run <code>ubuntu config --default-user &lt;username&gt;</code> in PowerShell, replacing <code>&lt;username&gt;</code> with the name of the newly-created user</li> <li>Run <code>whoami</code> after closing and reopening Ubuntu, verifying that it returns your Ubuntu username</li> </ol> </li> </ol> </li> </ol> </li> <li> <p>Install Docker Desktop with the WSL 2 backend</p> </li> </ol> <p>Install Docker Desktop for your computer's CPU.</p> <ol> <li>Install Docker Engine<ul> <li>As of February 2023, Sailbot Workspace (more specifically its use of VS Code Dev Containers) isn't compatible   with Docker Desktop for Linux; if you have Docker Desktop installed, uninstall it and install Docker Engine instead.</li> </ul> </li> <li>Manage Docker as a non-root user</li> <li>Configure Docker to start on boot</li> </ol>"},{"location":"current/sailbot_workspace/setup/#vs-code","title":"VS Code","text":"<p>Visual Studio Code is a powerful and customizable code editor for Windows, Linux, and macOS. We strongly recommend that you use this editor to develop our software so that you can use all the features of Sailbot Workspace.</p> <ol> <li>Install VS Code</li> <li>Install the Remote Development Extension Pack</li> </ol>"},{"location":"current/sailbot_workspace/setup/#2-set-up-x11-forwarding","title":"2. Set up X11 forwarding","text":"<p>X11 forwarding is a mechanism that enables Sailbot Workspace to run GUI applications. You can skip this step if you aren't running any GUI applications.</p> <ol> <li>Ensure that the versions of VS Code and its Dev Containers extension support X11 forwarding:<ol> <li>VS Code version &gt;= 1.75</li> <li>Dev Containers version &gt;= 0.275.1</li> </ol> </li> <li> <p>Verify that <code>echo $DISPLAY</code> returns something like <code>:0</code></p> <code>echo $DISPLAY</code> doesn't return anything <p>If <code>echo $DISPLAY</code> doesn't return anything, set it to <code>:0</code> on shell initialization:</p> <ol> <li>Find out what shell you are using with <code>echo $SHELL</code><ol> <li>Most Linux distributions use Bash by default, whose rc file path is <code>~/.bashrc</code></li> <li>macOS uses Zsh by default, whose rc file path is: <code>~/.zshrc</code></li> </ol> </li> <li>Run <code>echo 'export DISPLAY=:0' &gt;&gt; &lt;rc file path&gt;</code>, replacing <code>&lt;rc file path&gt;</code>    with the path to your shell's rc file</li> <li>Run <code>echo $DISPLAY</code> after closing and reopening your terminal, verifying it returns something like <code>:0</code></li> </ol> </li> <li> <p>Install a X11 server</p>  Windows macOS Linux <p>WSL includes a X11 server.</p> <ol> <li>Set up XQuartz following this guide</li> <li>Copy the default xinitrc to your home directory: <code>cp /opt/X11/etc/X11/xinit/xinitrc ~/.xinitrc</code></li> <li>Add <code>xhost +localhost</code> to <code>~/.xinitrc</code> after its first line</li> </ol>  General Arch Linux <p>As of February 2023, almost all Linux distributions include a X11 server, Xorg. This may change in the future as Wayland matures.</p> <ol> <li>Install xhost: <code>sudo pacman -S xorg-xhost</code></li> <li>Copy the default xinitrc to your home directory: <code>cp /etc/X11/xinit/xinitrc ~/.xinitrc</code></li> <li>Add <code>xhost +local:docker</code> to <code>~/.xinitrc</code> after its first line</li> </ol> </li> <li> <p>Verify that X11 forwarding works:</p> <ol> <li> <p>Install <code>x11-apps</code></p>  Windows macOS Linux <p>In Ubuntu, <code>sudo apt install x11-apps</code>.</p> <p>XQuartz includes <code>x11-apps</code>. Ensure that XQuartz is running.</p> <p>Install <code>x11-apps</code> using your desired package manager.</p> </li> <li> <p>Verify that running <code>xcalc</code> opens a calculator and that you can use it</p> </li> </ol> </li> </ol>"},{"location":"current/sailbot_workspace/setup/#3-clone-sailbot-workspace","title":"3. Clone Sailbot Workspace","text":"<pre><code>git clone https://github.com/UBCSailbot/sailbot_workspace.git\n</code></pre> Where to clone on Windows <p>Windows has a native file system as well as file systems for each WSL distribution. For the fastest performance speed,4 clone Sailbot Workspace in the WSL file system. We recommend cloning it somewhere in your Ubuntu user's home directory, which is what Ubuntu opens to by default.</p>"},{"location":"current/sailbot_workspace/setup/#4-open-sailbot-workspace-in-vs-code","title":"4. Open Sailbot Workspace in VS Code","text":"<ol> <li> <p>Install <code>code</code> command in <code>PATH</code></p>  Windows macOS Linux <p>The <code>code</code> command is installed by default.</p> <p>See launching from the command line.</p> <p>The <code>code</code> command is installed by default.</p> </li> <li> <p>Run <code>code sailbot_workspace</code></p> </li> </ol>"},{"location":"current/sailbot_workspace/setup/#5-open-sailbot-workspace-in-a-dev-container","title":"5. Open Sailbot Workspace in a Dev Container","text":"<ol> <li>Ensure that Docker is running</li> <li>Run the <code>Dev Containers: Reopen in Container</code> command in the    VS Code command palette</li> </ol>"},{"location":"current/sailbot_workspace/setup/#6-open-the-vs-code-workspace-file","title":"6. Open the VS Code workspace file","text":"<ol> <li>Open the file <code>.devcontainer/config/sailbot_workspace.code-workspace</code> in VS Code</li> <li>Click <code>Open Workspace</code></li> </ol>"},{"location":"current/sailbot_workspace/setup/#setup-sailbot-workspace-in-a-github-codespace","title":"Setup Sailbot Workspace in a GitHub Codespace","text":"<p>A codespace is a development environment that's hosted in the cloud.5 Since Sailbot Workspace is resource intensive, it has high hardware requirements and power consumption which isn't ideal for development on laptops. GitHub Codespaces provides a seamless experience to work on a repository off-device, especially if the repository has a Dev Container like Sailbot Workspace does. They can run in VS Code or even in a browser for times when you aren't on your programming computer.</p> <p>Create a GitHub Codespace following the steps in the relevant GitHub Docs page: create a codespace for a repository. A couple things to note:</p> <ul> <li>For the best Sailbot Workspace development experience, select the high-spec machine available</li> <li>There are usage limits if you don't want to pay:   monthly included storage and core hours for personal accounts<ul> <li>Upgrade to a Pro account for increased usage limits (this is free for students):   apply to GitHub Global Campus as a student</li> <li>Stop your codespace as soon as you are done using it:   stopping a codespace</li> <li>Delete codespaces that you do not plan to use anymore:   deleting a codespace</li> </ul> </li> </ul> <p>Reopen a codespace following the steps in the relevant GitHub Docs page: reopening a codespace.</p> <p>(Current) limitations of GitHub Codespaces:</p> <ul> <li>Does not support X11 forwarding to run GUI applications</li> <li>High-spec machines not available. As of March 2023, the highest-spec machine that is publically available   has a 4-core CPU and 8GB of RAM</li> </ul> <ol> <li> <p>Wikipedia Docker page \u21a9</p> </li> <li> <p>Get Docker \u21a9\u21a9</p> </li> <li> <p>What is the difference between Docker Desktop for Linux and Docker Engine \u21a9</p> </li> <li> <p>File storage and performance across file systems \u21a9</p> </li> <li> <p>GitHub Codespaces overview \u21a9</p> </li> </ol>"},{"location":"reference/markdown/","title":"Markdown","text":"<p>Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.1 You can do anything with Markdown, from creating websites to PDF documents, all in a clean format that is easy to learn. Many of your favorite services use Markdown, so it would be useful to pick it up to write technical documentation.</p> <p>Markdown is not standardized across services. Many services that support Markdown have their own \"flavour\" of Markdown. Be sure to know the Markdown features of the service you are using so that your Markdown renders properly.</p>"},{"location":"reference/markdown/#getting-started","title":"Getting Started","text":"<p>We recommend markdownguide.org to be your first point of reference if\\ you are learning Markdown for the first time. It covers topics like what Markdown is, its syntax, advanced tips, and the different services that support Markdown. Flavours of Markdown specific to a service build on top of these basics.</p>"},{"location":"reference/markdown/#sailbot-and-markdown","title":"Sailbot and Markdown","text":"<p>We write Markdown for GitHub and Material for MkDocs. The following sections detail how Markdown is used in these services.</p>"},{"location":"reference/markdown/#github","title":"GitHub","text":"<p>We use Markdown in GitHub for technical documentation and collaboration. This includes:</p> <ul> <li><code>README.md</code> files</li> <li>Issues</li> <li>Pull Requests</li> </ul> <p>Almost all places where text is written in GitHub support Markdown. GitHub also allows you to preview your Markdown before you submit any comments.</p> Before RenderingAfter Rendering <p></p> <p></p> <p>The image above shows an example of a \"write\" and a \"preview\" tab for writing a comment on an issue. It might look different depending on where you are writing, but there usually exists a preview option!</p> <p>GitHub-Flavoured Markdown</p> <p>GitHub uses its own \"flavour\" of Markdown. Certain features, like using HTML, are excluded for security reasons. Visit the official GitHub Markdown guide for more information on the available features.</p>"},{"location":"reference/markdown/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>We use Markdown in Material for MkDocs to create this website! Since it is written in Markdown, no frontend experience is required to contribute to our docs.</p> <p>Material for MkDocs supports powerful features purpose-built to take technical documentation to the next level. Feel free to browse this site to see how we use these features, exploring their syntax in the source code. Since GitHub renders Markdown files automatically you will need to click the \"Raw\" button to view their contents.</p> <p>Material-Flavoured Markdown</p> <p>Material for MkDocs' flavour of Markdown extends upon vanilla Markdown, adding features such as admonitions  (like this note) and content tabs. Refer to the official Material for MkDocs reference page for more information on the available features.</p>"},{"location":"reference/markdown/#rendering-markdown","title":"Rendering Markdown","text":"<p>You have a few choices to render Markdown on your computer. Be advised that if you are using an extended version of Markdown, you will need to consult the documentation from the service provider to render their flavour of Markdown properly. The following resources are good for rendering Markdown:</p>  Vanilla Github  Material for MkDocs <ul> <li>VS Code: Markdown rendering is supported out of the box.</li> <li>Markdown Live Preview: An online rendering tool.</li> </ul> <ul> <li>Markdown Preview GitHub Styling: VS Code extension that renders GitHub-flavoured markdown.</li> <li>Create a draft issue on GitHub and preview the markdown to see how it renders.</li> </ul> <ul> <li>UBC Sailbot Docs: To preview your changes when working on this site, refer to the run instructions in the <code>README.md</code>.</li> <li>Material for MkDocs sites in general: If you ever decide to write your own documentation using Material for MkDocs, refer to the official \"Getting Started\" guide.</li> </ul> <p>Other resources exist to render Markdown like browser extensions that render Markdown as HTML and GitHub repositories that contain source code to render your Markdown. Feel free to browse around for the solution that suits your needs.</p>"},{"location":"reference/markdown/#linting","title":"Linting","text":"<p>We lint our Markdown files to reduce errors and increase readability. In particular, we use two tools:</p> <ol> <li> <p>markdownlint is used to enforce a style guide. Its configuration file for this repository is <code>.markdownlint.json</code>. If you use VS Code, there is a markdownlint extension.</p> </li> <li> <p>markdown-link-check is used to check for broken links. Its configuration file for this repository is <code>.markdown-link-check.json</code>.</p> </li> </ol> <ol> <li> <p>https://www.markdownguide.org/getting-started/ \u21a9</p> </li> </ol>"},{"location":"reference/ros/","title":"Robot Operating System","text":"<p>Robot Operating System (ROS) is a set of software libraries and tools for building robot applications.1 It provides functionality for hardware abstraction, device drivers, communication between processes over multiple machines, tools for testing and visualization, and much more.2</p> <p>We use ROS because it is open-source, language-agnostic, and built with cross-collaboration in mind. It enables our sub-teams to work independently on well-defined components of our software system without having to worry about the hardware it runs on or the implementation of other components.</p> <p>The official ROS 2 documentation contains everything you need to get started using ROS. From it we have hand-picked the resources that are most relevant to our current and expected future usage of ROS assuming that you use our preconfigured workspace. To run our software on your device without our workspace, you would have to install ROS and the dependencies that are in our Docker images yourself.</p>"},{"location":"reference/ros/#workspace-configuration","title":"Workspace Configuration","text":"<p>To get our workspace configuration running on your computer:</p> <ol> <li>Set it up by following the setup instructions</li> <li>Uncomment the ROS 2 tutorials section in <code>.devcontainer/Dockerfile</code>,    then run the \"Dev Containers: Rebuild Container\" VS Code command, to install the tutorials' dependencies</li> <li>Uncomment the ROS 2 tutorials section in <code>src/new_project.repos</code>,    then run the \"setup\" VS Code task, to clone the repositories used in the tutorials</li> </ol> <p>Our workspace configuration contains easier methods of accomplishing some of the tutorial steps, or eliminates the need for them altogether.</p> Tutorial step Sailbot Workspace configuration Install a package All packages used in the tutorials are already installed (step 2 above) Clone a sample repo (ros_tutorials) ros_tutorials is already cloned (step 3 above) Resolve dependencies Run the \"install dependencies\" VS Code task Build the workspace Run the \"Build\" VS Code task, AKA Ctrl+Shift+B Source the overlay Run the <code>srcnew</code> terminal command Create a package with a node Run the \"new ament_(python|cmake) package with a node\" VS Code task"},{"location":"reference/ros/#tutorials","title":"Tutorials","text":"<p>We encourage all software members to work through the ROS tutorials that are listed below in order. For tutorials that have both C++ and Python versions, NET members should do the C++ version while CTRL and PATH members should do the Python version.</p> <ul> <li>Beginner: CLI tools<ul> <li>Introducing <code>turtlesim</code> and <code>rqt</code></li> <li>Understanding nodes</li> <li>Understanding topics</li> <li>Understanding services</li> <li>Understanding parameters</li> <li>Understanding actions</li> <li>Using <code>rqt_console</code> to view logs</li> <li>Recording and playing back data</li> </ul> </li> <li>Beginner: Client libraries<ul> <li>Creating a workspace</li> <li>Creating a package</li> <li>Writing a simple publisher and subscriber (C++ or Python)</li> <li>Writing a simple service and client (C++ or Python)</li> <li>Using parameters in a class (C++ or Python)</li> <li>Using <code>ros2doctor</code> to identify issues</li> </ul> </li> <li>Intermediate<ul> <li>Launch</li> <li>Testing</li> </ul> </li> <li>Demos<ul> <li>Logging</li> </ul> </li> </ul>"},{"location":"reference/ros/#concepts","title":"Concepts","text":"<p>We encourage all software members to read the following documentation on key ROS concepts:</p> <ul> <li>About logging and logger configuration</li> <li>About ROS 2 interfaces</li> <li>About parameters in ROS 2</li> </ul>"},{"location":"reference/ros/#ros-1-bridge","title":"ROS 1 Bridge","text":"<p>There are two major versions of ROS, aptly named ROS 1 and ROS 2. Our previous project, Raye, uses ROS 1 because it was the only version available during her design process. Our new project will use ROS 2, a complete re-design of the framework that tackles the shortcomings of ROS 1 to bring it up to industry needs and standards.3 If you are curious about the changes made in ROS 2 compared to 1, this article is a worthwhile read.</p> <p>ROS 2 includes the ROS 1 Bridge, a collection of packages that can be installed alongside ROS 1 to help migrate code from ROS 1 to ROS 2. As we will be reusing parts of Raye's codebase, it is essential to know how to use these packages. Until we are completely done with Raye, our preconfigured workspace will have ROS 1, ROS 1 Bridge, and ROS 2 installed.</p> <p>We encourage all software members work through the ROS 1 Bridge README. For PATH members, the Migrating launch files from ROS 1 to ROS 2 page will be a helpful reference when we do so.</p> <ol> <li> <p>https://docs.ros.org/en/humble/index.html \u21a9</p> </li> <li> <p>https://www.toptal.com/robotics/introduction-to-robot-operating-system \u21a9</p> </li> <li> <p>https://ubuntu.com/robotics/what-is-ros \u21a9</p> </li> </ol>"},{"location":"reference/cpp/differences/","title":"Differences Between C and C++","text":"<p>For most use cases, you can think of C++ as a superset of C. While this is not technically true, more often than not you are able to write standard C code for a C++ program without issues. However, doing so ignores a lot of the benefits and reasons to use C++.</p>"},{"location":"reference/cpp/differences/#classes-and-structs","title":"Classes and Structs","text":"<p>In C structs can only contain member variables, but in C++ structs are basically classes but with a default member visibility of public instead of private.</p> Example <p>The following code blocks are equivalent.</p> <pre><code>struct foo {\nprivate:\nint x;\nvoid helper(void);\npublic:\nfoo(int y);\n}\n</code></pre> <pre><code>class foo {\nprivate:\nint x;\nvoid helper(void);\npublic:\nfoo(int y);\n}\n</code></pre>"},{"location":"reference/cpp/differences/#namespaces","title":"Namespaces","text":"<p>One problem that is prevalent in C concerns the scoping of names. For example, let there be two files <code>A.h</code> and <code>B.h</code> and a program <code>ighxy.c</code>, and let them both contain a <code>float x</code> and <code>int bar(void)</code>.</p> <p>Our program cannot compile because the linker cannot distinguish which <code>bar()</code> function we want to use! One way to fix this in a C program would be to rename them <code>a_bar()</code> and <code>b_bar()</code>. Although this fix seems trivial for this example, applying it to a file that has potentially 100 functions can be a lot more difficult, especially if two files just happen to share the same prefix for their functions!</p> <p>C++ introduces namespaces to tackle this problem. With namespaces, we can deal with naming conflicts much more easily. Though be aware that namespaces are not necessary everywhere. See the following code snippet to see how they work.</p> Example CC++ A.h<pre><code>float x;\nint bar(void);\n</code></pre> B.h<pre><code>float x;\nint bar(void);\n</code></pre> ighxy.c<pre><code>#include \"A.h\"\n#include \"B.h\"\nint main(void) {\nint a = bar();\n...\n}\n/* Error, does not compile*/\n</code></pre> A.h<pre><code>namespace a {\nfloat x;\nint bar(void);\n}\n</code></pre> B.h<pre><code>namespace b {\nfloat x;\nint bar(void);\n}\n</code></pre> ighxy.cpp<pre><code>#include \"A.h\"\n#include \"B.h\"\nint main(void) {\nint a = a::bar();\nint b = b::bar();\nfloat xa = a::x;\nfloat xb = b::x;\n/* No problem! */\n...\n}\n</code></pre> Warning <p>You may come across something like:</p> example.cpp<pre><code>using namespace std;\nnamespace io = std::filesystem;\nint main(int argc, char* argv[]) {\nbool isDirectory = io::is_directory(argv[1]);  // Equivalent to std::filesystem::is_directory(argv[1])\ncout &lt;&lt; isDirectory &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>There are two things going on here.</p> <p>First, <code>using namespace std</code> makes all functions and types defined within the standard namespace and included via  <code>#include</code> directives visible to <code>example.cpp</code>. If you are familiar with Python, the Python equivalent of this would be <code>import std as *</code>. However, it is considered bad practice to do this as it eliminates the point of using namespaces.</p> OKNot OK <pre><code>    class string {\n// Insert implementation here\n}\nint main(void) {\nstring ourString = \"Our own string implementation\";\nstd::string stdString = \"Standard Library string implementation\";\n...\n}\n</code></pre> <pre><code>    using namespace std;\n// ERROR - multiple definitions of type string\nclass string {\n}\n</code></pre> <p>The compiler cannot infer which implementation we want.</p> <p>Secondly, <code>namespace io = std::filesystem</code> is basically an alias for the <code>std::filesystem</code> namespace. This practice is acceptable for long namespace identifiers, but be careful as it can still run into namespace conflicts if your alias is the same as another namespace or alias.</p>"},{"location":"reference/cpp/differences/#constant-expressions","title":"Constant Expressions","text":"<p>In C, if we want to declare a constant or a function/expression that we want to be evaluated at compile time, we need to use <code>#define</code> statements. One of the problems with <code>#define</code> statements is that they perform a simple copy paste wherever they're used. For example:</p> Before PrecompileAfter Precompile <pre><code>#define PI 3.14F\n#define AREA_OF_CIRCLE(radius) ((PI) * (radius) * (radius))\nint main(void) {\nfloat area = AREA_OF_CIRCLE(2.5F);\n...\n}\n</code></pre> <pre><code>int main(void) {\nfloat area = ((3.14F) * (2.5F) * (2.5F));\n...\n}\n</code></pre> <p>Note</p> <p><code>AREA_OF_CIRCLE</code> is a macro with arguments. If you are confused by it, this resource has a detailed explanation on how they work.</p> <p>Because of this copy-pasting, you need to be very careful with syntax, sometimes necessitating an ugly <code>do {} while(0)</code> wrapper. Moreover, symbols declared with <code>#define</code> are always globally visible, ignoring namespaces!</p> <p>In C++, the use of constant expressions are preferred.</p> <pre><code>constexpr float pi = 3.14F;\nconstexpr float area_of_circle(float radius) {\nreturn pi * radius * radius;\n}\n</code></pre> <p>Constant expressions do not get copy pasted, and are instead placed in program memory just like a normal variable or function. They also respect namespaces and function scopes, meaning the following code compiles.</p> Constant Expression Scoping<pre><code>void foo(void) {\nconstexpr float rand = 123.456;\n...\n}\nvoid bar (void) {\nconstexpr float rand = 789.123;\n...\n}\n</code></pre>"},{"location":"reference/cpp/differences/#lambdas","title":"Lambdas","text":"<p>Lambdas are primarily useful when you need to register a callback function one time and don't feel it's necessary to write out a full function. They are in no way required though, so do not worry about learning them. However, it's necessary to know that they exist such that you don't get confused when reading code. For more information, go here for Microsoft's explanation.</p>"},{"location":"reference/cpp/differences/#misc","title":"Misc","text":""},{"location":"reference/cpp/differences/#arrays","title":"Arrays","text":"<p>Using the C++ implementation of arrays is preferred over C arrays. It is simply easier and safer to work with than a standard C array without any performance costs.</p> Example <p>Passing an array to a function an iterating over it</p> CC++ <p><pre><code>#include \"stdio.h\"\nvoid print_contents(int *arr, int size) {\nfor (int i = 0; i &lt; size; i++) {\nprintf(\"%d\\n\", *arr);\n}\n}\nint main(void) {\nint arr[5] = {0, 1, 2, 3, 4};\nfoo(arr, 5);\nreturn 0;\n}\n</code></pre> We can't even guarantee that the integer pointer <code>arr</code> is an array!</p> <p>C++ 20 makes passing arrays around a lot simpler. Do not worry about understanding the code shown below. It uses some fairly advanced concepts and exists to illustrate how different such a simple operation can be.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;array&gt;\n#include &lt;span&gt;\nvoid print_contents(std::span&lt;int&gt; container) {\nfor (const auto &amp;e : container) {\nstd::cout &lt;&lt; e &lt;&lt; std::endl;\n}\n}\nint main(void) {\nstd::array&lt;int, 5&gt; arr = {0, 1, 2, 3, 4};\nfoo(arr);\nreturn 0;\n}\n</code></pre> <p>The advantages of the C++ version are:</p> <ul> <li>Size is implicitly part of the object</li> <li>We guarantee that foo takes a container, but it does not care if it's an array or, say, a vector, which is   preferable in this scenario where we simply iterate through the container's existing elements</li> </ul>"},{"location":"reference/cpp/start/","title":"Getting Started","text":"<p>UBC Sailbot's Network Systems team uses C++ for its software. If you know already know C, then you already know the bare minimum to write C++. This is a good starting point, but the additional features C++ provides allow for safer programming practices.</p>"},{"location":"reference/cpp/start/#for-cc-beginners","title":"For C/C++ Beginners","text":"<p>If you just need to know how C++ is different from C, then see the Differences Between C and C++. You should also look at it if you go through and finish this section.</p> <p>If you are new to C and C++, then this the best place to start. The tutorials provided in this section will help you learn the fundamentals of the language. Do not feel pressured to do all the tutorials! Just get comfortable with the syntax and the mechanisms of the language.</p> <p>Note</p> <p>The hardest part about this will likely be pointers and dynamic memory, so pay close attention to tutorials concerning them! Additionally, dynamic memory requires the usage of pointers, but pointers do not require dynamic memory!</p> <p>Tip</p> <p>Dynamic memory is much more prone to error than statically allocated memory, so try to use static allocation whenever possible</p> Resource Description w3schools Tutorial A structured tutorial that goes through basic concepts in C++. It's good to do up to the section on Classes. YouTube Tutorial If you prefer video tutorial, then this is a comprehensive 4 hour video covering similar concepts to the one above. It is 4 hours long though. Dynamic Memory Overview A page going over how dynamic memory works in C++. <p>Feel free to add other resources other than the ones listed above if you find any that you like!</p>"},{"location":"reference/cpp/tools/","title":"Tools","text":"<p>A lot goes into making a well structured C++ project, much more than any one team should have to do.</p>"},{"location":"reference/cpp/tools/#cmake","title":"CMake","text":"<p>CMake is a powerfull build automation tool that makes compiling code for large projects with a lot of interoperating files a lot easier. Steps 1-3 of the official tutorial are great for understanding the basics.</p>"},{"location":"reference/cpp/tools/#gdb","title":"GDB","text":"<p>The GNU Project Debugger is the most commonly debugger for the C language family. VSCode also has a degree of integration with GDB that allows an easy to use GUI. This GDB cheat sheet has all the GDB comands you will need to know. Be aware the VSCode has GUI buttons for some of these commands that are easier to use.</p>"},{"location":"reference/cpp/tools/#googletest","title":"GoogleTest","text":"<p>GoogleTest is the C++ unit testing framework we will be using. The GoogleTest Primer is a good place to start.</p> Example Cached Fibonacci ProgramTest Cached Fibonacci Program cached_fib.h<pre><code>#include &lt;vector&gt;\nclass CachedFib {\npublic:\nvoid CachedFib(int n);\nint  getFib(int n);\nprivate:\nstd::vector&lt;int&gt; cache;\n}\n</code></pre> cached_fib.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include \"cached_fib.h\"\nvoid CachedFib::CachedFib(int n) {\ncache.push_back(0);\ncache.push_back(1);\nfor (int i = 2; i &lt; n; i++) {\ncache.push_back(cache[i - 1] + cache[i - 2]);\n}\n}\nint CachedFib::getFib(int n) {\nif (cache.size() &lt; n) {\nfor (int i = cache.size(); i &lt; n; i++) {\ncache.push_back(cache[i-1] + cache[i-2]);\n}\n}\nstd::cout &lt;&lt; cache[n - 1] &lt;&lt; std::endl;\n}\n</code></pre> test_cached_fib.cpp<pre><code>#include \"cached_fib.h\"\n#include \"gtest/gtest.h\"\nCachedFib::testFib;\nclass TestFib : public ::testing::Test {\nprotected:\nvoid Setup override {\n// Every time a test is started, testFib is reinitialized with a constructor parameter of 5\ntestFib = CachedFib(5);\n}\n}\nTEST_F(TestFib, TestBasic) {\nASSERT_EQ(getFib(5), 3) &lt;&lt; \"5th fibonacci number must be 3!\";\n}\n// more tests\n</code></pre>"},{"location":"reference/cpp/tools/#google-protocol-buffer","title":"Google Protocol Buffer","text":"<p>Google Protocol Buffer (Protobuf) is a portable data serialization method. We use it over other methods like JSON and XML because it produces smaller binaries, an important consideration when sending data across an ocean. Unfortunately, there does not seem to be a easy to follow tutorial for using them, but here are the C++ basics. The page is quite dense and can be hard to follow, so do not worry if you do not understand it.</p>"},{"location":"reference/cpp/tools/#clang","title":"Clang","text":"<p>In its most basic form, Clang is a compiler for the C language family. Clang has multiple benefits like easier portability compared to, for example, GCC. Clang is actually \"half\" the compiler, the other half being LLVM. Without going into unnecessary detail, Clang compiles C++ code to a generic language before LLVM compiles it to machine specific language.</p>"},{"location":"reference/cpp/tools/#clangd","title":"Clangd","text":"<p>Clangd is the Clang language server. It provides a much more powerful intellisense than the default one used in VSCode's C/C++ extension.</p>"},{"location":"reference/cpp/tools/#clang-tidy","title":"Clang-Tidy","text":"<p>Clang-Tidy is a linting tool, who's main purpose is to catch potential programming errors caused by bad programming style/practices using just static analysis.</p>"},{"location":"reference/cpp/tools/#clang-format","title":"Clang Format","text":"<p>An autoformatting tool that makes enforcing style guidelines much easier. When se tup, it corrects formatting as soon as you hit save.</p>"},{"location":"reference/cpp/tools/#llvm-cov","title":"llvm-cov","text":"<p>We will use llvm-cov to evaluate our test coverage. When used with genhtml, we can generate HTML reports that that show our line, function, and branch coverage line-by-line.</p>"},{"location":"reference/github/workflow/branches/","title":"Developing on Branches","text":"<p>We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation.</p>"},{"location":"reference/github/workflow/branches/#creating-a-branch","title":"Creating a branch","text":"<p>When starting a new issue, you will want to create a new branch for it:</p> <p>Caution</p> <p>When creating branches locally, it uses your local copy to create the new branch. Remember to do a <code>git pull</code>  if you intend on using the latest changes from the remote branch you are creating from.</p> Creating a new branch from main<pre><code># Switch to main\ngit switch main\n\n# Update your local copy\ngit pull\n\n# Clone a new branch from main\ngit switch -c &lt;branch_name&gt;\n</code></pre> <p>IMPORTANT: When creating a new branch for an issue, you must create the branch from <code>main</code>.</p>"},{"location":"reference/github/workflow/branches/#branch-naming-convention","title":"Branch naming convention","text":"<p>When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention:</p> <pre><code>user/&lt;github_username&gt;/&lt;issue_number&gt;-&lt;issue_description&gt;\n</code></pre> <p>Example</p> <p>If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like <code>user/jill99/39-fix-pathfinding-bug</code>.</p> <p>If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice.</p>"},{"location":"reference/github/workflow/branches/#tracking-and-committing-changes","title":"Tracking and committing changes","text":"<p>All files where new changes have been made must first be \"staged\" in order to make commits:</p> <pre><code>git add &lt;FILES&gt;\n</code></pre> <p>Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes:</p> <pre><code>git commit -m \"&lt;commit_message&gt;\"\n</code></pre> <p>Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history.</p> <p>When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist:</p> <pre><code>git push -u origin &lt;current_branch_name&gt;\n</code></pre>"},{"location":"reference/github/workflow/branches/#merging-branches","title":"Merging branches","text":"<p>There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches.</p> Merge Local BranchMerge Remote Branch <pre><code># Checkout to destination branch\ngit checkout &lt;dest_branch&gt;\n\n# Merge with local copy of other branch\ngit merge &lt;other_branch&gt;\n</code></pre> <pre><code># Checkout to destination branch\ngit checkout &lt;dest_branch&gt;\n\n# Fetch from remote\ngit fetch\n\n# Merge remote copy of other branch\ngit merge origin/&lt;other_branch&gt;\n</code></pre> <p>Info</p> <p>Merging a remote branch into its local counterpart using the method above is essentially the same operation as <code>git pull</code>.</p> <p>Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a <code>git log</code>, you will also see a new commit that indicates that the merge happened.</p>"},{"location":"reference/github/workflow/branches/#resolving-merge-conflicts","title":"Resolving merge conflicts","text":"<p>Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this:</p> <p></p> <p>Upon inspecting <code>bar.txt</code>, we see the following:</p> <p></p> <p>Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include:</p> <ul> <li>Resolving on GitHub (recommended)</li> <li>Resolving in Command Line</li> </ul> <p>Tip</p> <p>If you cannot resolve a merge conflict on your own, reach out to your lead for help!</p>"},{"location":"reference/github/workflow/issues/","title":"Creating Issues","text":"<p>GitHub issues lets us plan and track our work on GitHub.</p>"},{"location":"reference/github/workflow/issues/#getting-started-with-issue-templates","title":"Getting started with issue templates","text":"<p>An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar.</p> <p></p> <p>You will see a list of current issues (if any) for the repository. To create a new issue, click on the <code>New issue</code> button in the upper right corner.</p> <p></p> <p>When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues.</p> <p></p> <p>Note</p> <p>GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation  for some quick tips and tricks on how to write awesome markdown!</p> <p>Click on the <code>Get started</code> button to open the issue template. For this example, let's go with the <code>New Feature</code> issue template. Upon opening the issue template, you should see a page like the one below:</p> <p></p> <p>At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary.</p> <p>Finally, feel free to make suggestions on new templates or changing current templates!</p> <p>Tip</p> <p>We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies!</p>"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-project","title":"Adding issues to a project","text":"<p>We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the <code>Projects</code> section and add it to your desired project. You will almost always want to add your issue to the Software organization project.</p> <p></p> <p>To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the <code>Projects</code> tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the <code>General</code> tab (depending on the project, this might not always be the case).</p>"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-milestone","title":"Adding issues to a milestone","text":"<p>We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the <code>Milestone</code> section and add it to your desired milestone.</p> <p></p> <p>Note</p> <p>Unlike projects, milestones are strictly associated with a repository.</p>"},{"location":"reference/github/workflow/issues/#labelling-issues","title":"Labelling issues","text":"<p>GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the <code>Labels</code> section and add your desired label(s).</p> <p></p> <p>The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible.</p> <p>Note</p> <p>Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well!</p>"},{"location":"reference/github/workflow/issues/#adding-assignees","title":"Adding assignees","text":"<p>Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the <code>Assignees</code> section and add the desired people.</p> <p></p>"},{"location":"reference/github/workflow/issues/#submit-the-issue","title":"Submit the issue","text":"<p>Once you are finished writing your issue, click on the <code>Submit new issue</code> button. You should now see your issue in the issues list and in the UBC Sailbot software project.</p>"},{"location":"reference/github/workflow/overview/","title":"Development Workflow Overview","text":"<pre><code>graph LR\n    B[Problem Conception] --&gt; C{Small Fix?};\n    C --&gt; |Yes| E[Development];\n    C --&gt; |No| D[Issue Creation];\n    D --&gt; E;\n    E --&gt; F[Pull Request];\n    F --&gt; G{Approved?};\n    G --&gt; |No| E;\n    G --&gt; |Yes| H[Merge PR into Main];</code></pre> <p>A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections.</p>"},{"location":"reference/github/workflow/overview/#version-control-git","title":"Version control: Git","text":"<p>We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started:</p> Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git."},{"location":"reference/github/workflow/overview/#remote-server-github","title":"Remote server: GitHub","text":"<p>We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are:</p> <ul> <li>Issues</li> <li>Projects</li> <li>Milestones</li> <li>GitHub Organizations</li> <li>Repository Permissions and Branch Protection Rules</li> <li>And more!</li> </ul>"},{"location":"reference/github/workflow/pr/","title":"Pull Requests","text":"<p>Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews.</p> <p>Note</p> <p>Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small.</p>"},{"location":"reference/github/workflow/pr/#creating-a-pull-request","title":"Creating a pull request","text":"<p>To create a pull request in a repository, to go the <code>Pull requests</code> tab and then click <code>New pull request</code>:</p> <p></p> <p>On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch.</p> <p></p> <p>Once you have decided on your base and compare branches, click on <code>Create pull request</code>. You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready):</p> <p></p> <p>Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <code>&lt;KEYWORD&gt; #&lt;ISSUE NUMBER&gt;</code> to the initial comment in the pull request. A list of valid keywords can be found here.</p> <p>Example</p> <p>\"This issue resolves #49. Please review my pull request!\"</p> <p>Observe that the right-hand side banner contains the following:</p> Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. <p>Attention</p> <p>If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards.</p>"},{"location":"reference/github/workflow/pr/#merging-into-main","title":"Merging into main","text":"<p>Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met:</p> <ol> <li>All CI checks pass (look for a green checkmark beside your latest commit on GitHub).</li> <li>All reviewers have reviewed the PR and approved the PR.</li> <li>There are no unresolved comments and suggestions from the reviewers.</li> <li>There are no merge conflicts with the main branch.</li> </ol> <p>If all of these conditions are met, confirm that the merge is good to go by clicking <code>Squash and merge</code>:</p> <p></p>"},{"location":"reference/github/workflow/pr/#reviewing-a-pull-request","title":"Reviewing a pull request","text":"<p>A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits.</p> <p></p> <p>In particular, you will most likely be doing the following in a pull request:</p> <ul> <li>Asking Questions: Clarify your understanding about something that you are not sure about.</li> <li>Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others.</li> <li>Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future.</li> <li>Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).</li> </ul>"},{"location":"reference/python/conventions/","title":"Conventions","text":"<p>At UBC Sailbot, we follow standards in how we code to maintain a clean and comprehensible codebase. This page addresses what conventions we use specifically when programming in Python and the tools to help us maintain these conventions.</p>"},{"location":"reference/python/conventions/#style-guide","title":"Style guide","text":""},{"location":"reference/python/conventions/#linting","title":"Linting","text":"<p>To ensure that the codebase stays clean, we use flake8, which is a tool for style guide enforcement mostly based off pep8. To automate most of this process, we use autopep8, which is a tool that resolves most style issues. However, there will be some issues that must be resolved by you!</p> <p>Refer to this guide on how to write readable code in python with the pep8 style guide.</p> <p>Note</p> <p>Our CI automatically checks that your code follows the pep8 standard. If it does not, your pull requests will be blocked from being merged until those issues are resolved!</p>"},{"location":"reference/python/conventions/#type-hinting","title":"Type hinting","text":"<p>Even though Python is a dynamically typed language, newer versions support type hinting. Type hinting catches errors, documents code, improves IDEs and linters, and helps build and maintain a clean software architecture.1 Expanding on how it catches errors, a static type checker such as <code>mypy</code> can be used.</p> <p>There is some syntax to get familiar in order to use type checking. We recommend the following resources:</p> <ul> <li>mypy Typing Cheatsheet</li> <li>PEP 483: The Theory of Type Hints (A Simplified Guide)</li> <li>PEP 484: Type Hints (Fully Comprehensive Guide)</li> </ul> <p>Below are a few examples of using type hinting:</p> Return the sum of a sequence <pre><code>from typing import Sequence, Union\nNumber = Union[int, float]\ndef sumseq(seq : Sequence[Number]) -&gt; Number:\nreturn sum(seq)\n</code></pre> Function with optional parameters and default values <pre><code>from typing import Optional\ndef printArgs(a : str, b : str=\"World\", c : Optional[str]=None) -&gt; None:\nprint(f\"Value of a: {a}\")\nprint(f\"Value of b: {b}\")\nif c is not None:\nprint(f\"Value of c: {c}\")\n</code></pre> Function with custom class <pre><code>class MyClass:\ndef __init__(self) -&gt; None:\npass\ndef foo(a : MyClass) -&gt; None:\nprint(a)\n</code></pre> Forward referencing a class With <code>__future__</code>Without <code>__future__</code> <pre><code>from __future__ import annotations\ndef foo(a : MyClass) -&gt; None:\nprint(a)\nclass MyClass:\ndef __init__(self) -&gt; None:\npass\n</code></pre> <pre><code>def foo(a : 'MyClass') -&gt; None:\nprint(a)\nclass MyClass:\ndef __init__(self) -&gt; None:\npass\n</code></pre> Function that never returns <pre><code>from typing import NoReturn\ndef bar() -&gt; NoReturn:\nwhile True:\nprint(\"Hello World!\")\n</code></pre>"},{"location":"reference/python/conventions/#documentation","title":"Documentation","text":"<p>Code is written once and read a thousand times, so it is important to provide good documentation for current and future members of the software team. The major things that we document in our code are:</p> <ol> <li>Classes and Objects:<ul> <li>What does it represent? What is it used for?</li> <li>What are its member variables? What are they used for?</li> </ul> </li> <li>Functions:<ul> <li>What are the inputs and outputs?</li> <li>What is the overall behavior and purpose of the function?</li> </ul> </li> <li>Code:<ul> <li>Is a line of code obscure and/or not clear? Add an inline comment to clear things up.</li> <li>Break down a large process.</li> </ul> </li> </ol> <p>Ideally, the third point should be avoided as much as possible since we would want our code to be self explanatory. It should be done only when absolutely necessary.</p>"},{"location":"reference/python/conventions/#generating-docstrings","title":"Generating docstrings","text":"<p>We use a vscode extension called autoDocstring which autogenerates docstrings that we use to document our code. To install this extension, go to the <code>Extensions</code> tab in vscode and search <code>autoDocstring</code> in the marketplace.</p> <p>To generate docstrings, type <code>\"\"\"</code> at the beginning of the function that you want to document and the template will be generated for you! If you use type hinting, this extention will autofill some of the documentation for you!</p> <p>Note</p> <p>The autoDocstring extension only works for functions. It does not work for classes and objects, so documenting these will have to be done manually. Be sure to follow the same format used by functions.</p>"},{"location":"reference/python/conventions/#example-on-documentation","title":"Example on documentation","text":"<p>It's hard to imagine what good documentation looks like. We provide a few examples below of documenting code using the autoDocstring extension. The extension uses Google style docstrings by default.</p> Documentation example on a function <pre><code>from typing import List\ndef inner_product(v1 : List[float], v2 : List[float]) -&gt; float:\n\"\"\"\n    Computes the inner product between two 1D real vectors. Input vectors should have the\n    same dimensions.\n    Args:\n        v1 (List[float]): The first vector of real numbers.\n        v2 (List[float]): The second vector of real numbers.\n    Returns:\n        float : The inner product between v1 and v2\n    \"\"\"\nassert (len(v1) == len(v2)), \"Input lists must have same length\"\n# Iterate through elementwise pairs\nsummation = 0\nfor e1, e2 in zip(v1, v2):\nsummation += (e1 * e2)\nreturn float(summation)\n</code></pre> Documentation example with a stack <pre><code>from typing import Any\nclass Stack:\n\"\"\"\n    This class represents a stack, which is an abstract data type that serves as a collection of\n    elements. The stack is a LIFO datastructure defined by two main operations: Push and Pop.\n    Attributes:\n        __stack (List[Any]): A list containing the elements on the stack.\n    \"\"\"\ndef __init__(self):\n\"\"\"\n        Initializes the Stack object.\n        \"\"\"\nself.__stack = []\ndef push(self, element : Any) -&gt; Any:\n\"\"\"\n        Pushes an element to the top of the stack.\n        Args:\n            element (Any): The element to be pushed on to the stack.\n        \"\"\"\nself.__stack.append(element)\ndef pop(self) -&gt; Any:\n\"\"\"\n        Removes the element at the top of the stack and returns it. If the stack is empty,\n        then None is returned.\n        Returns:\n            Any, NoneType: The element at the top of the stack.\n        \"\"\"\nif self.is_empty():\nreturn None\nelse:\nreturn self.__stack.pop()\ndef is_empty(self) -&gt; bool:\n\"\"\"\n        Determines whether the stack is empty or not.\n        Returns:\n            bool: Returns True if the stack is empty, and False otherwise.\n        \"\"\"\nempty = (len(self.__stack) == 0)\nreturn empty\ndef __len__(self) -&gt; int:\n\"\"\"\n        Gets the number of elements on the stack.\n        Returns:\n            int: The number of elements on the stack.\n        \"\"\"\nlength = len(self.__stack)\nreturn length\n</code></pre> <p>For more examples, see Example Google Style Python Docstrings.</p> <ol> <li> <p>https://realpython.com/lessons/pros-and-cons-type-hints/ \u21a9</p> </li> </ol>"},{"location":"reference/python/start/","title":"Getting Started","text":"<p>We use Python 3 to write the majority of our software at UBC Sailbot. Pathfinding and Controls mainly use Python 3, so it is critical that you are familiar with the language if you are on one of these sub-teams.</p>"},{"location":"reference/python/start/#python-tutorials","title":"Python tutorials","text":"<p>We understand that not everyone who joins Sailbot has Python in their toolkit, nor do we expect it either! Whether you are learning Python for the first time or you just want to brush up, we have provided some resources below. You may not learn absolutely everything from the resources below, but it is a good starting point. You will mostly learn through doing, as you would with most technical skills!</p> Resource Description The Python Tutorial The official python tutorial. Good if you have some time on your hands and you are a completionist. Sections 1 - 5 and 9 are the most relevant. w3schools Tutorial Good if you want a more brief introduction to Python. It breaks down a lot of concepts into sections. Everything up to Python Classes/Objects is relevant. YouTube Tutorial If you like video tutorials, then we recommend this tutorial. This video is about 5 hours long, but it pretty much covers everything that you'll need to know for Python and there are some hands on  projects. Shorter YouTube Tutorial A shorter alternative YouTube tutorial condensed into 1 hour. It covers less material but still covers many of the essentials. CodingBat Practice Good resource to put your Python skills to practice on some simple coding problems. Note that this resource does not teach you python. <p>Feel free to add other resources other than the ones listed above if you find any that you like!</p>"},{"location":"reference/python/virtual-environments/","title":"Virtual Environments","text":"<p>The Python virtual environment is a tool for dependency management and project isolation. They solve many common issues, including:</p> <ul> <li> <p>Dependency Resolution: A project might want a package with version A while another project might want a package with version B. With a virtual environment, you can separate which packages that you want to use for a given project.</p> </li> <li> <p>Project Isolation: The environment for your project is self-contained and reproducible by capturing all dependencies in a configuration file.</p> </li> <li> <p>Housekeeping: Virtual environments allow you to keep your global workspace tidy.</p> </li> </ul> <p>There are two main methods of creating virtual environments: virtualenv and Anaconda. Each have their own benefits and drawbacks. Here are some differences between the two:</p> Virtualenv Anaconda Environment files are local. Environment files are available globally. Must activate environment by giving the path. Can activate the environment without knowing the path, but only the name. Can only use <code>pip</code> to install packages. Can either use <code>pip</code> or built-in <code>conda</code> package manager. Installation is very simple. Installation takes more effort. Can only install python packages. In addition to packages, you can download many data science tools. <p>We recommend virtualenv over Anaconda because of its simplicity. However, feel free to appeal to your preferences.</p>"},{"location":"reference/python/virtual-environments/#installation","title":"Installation","text":"Virtualenv Anaconda <p>If you already have python and the pip package manager installed, just execute the following:</p> Using pip to install virtualenv<pre><code>pip install virtualenv\n</code></pre> <p>Go to the official Anaconda website and follow the installation instructions for your operating system.</p>"},{"location":"reference/python/virtual-environments/#using-virtual-environments","title":"Using virtual environments","text":"<p>The name of a virtual environment is configurable. For the purposes of this site, we will use <code>env</code> as the environment name unless specified otherwise.</p>"},{"location":"reference/python/virtual-environments/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"Virtualenv Anaconda <p>Since virtualenv creates the environment directory in a specific location, make sure that you are in the located in the project that you want to work on.</p> Create virtual environment with virtualenv<pre><code># Go to desired location\ncd &lt;PATH TO DIRECTORY&gt;\n\n# Create the environment with the name env\npython3 -m venv env\n</code></pre> <p>Verify that your environment is created by examining your current directory and look for the directory that matches the name of your virtual environment.</p> <p>Since the environment will be available globally, there is no need to go to a specific location to create it.</p> Create virtual environment with Anaconda<pre><code># Create environment with name env and python version\nconda env create -n env python=&lt;PYTHON VERSION NUM&gt;\n</code></pre> <p>If you don't specify a python version, the default is the version you used when you downloaded and installed Anaconda. Verify that your environment is created by executing <code>conda env list</code>.</p>"},{"location":"reference/python/virtual-environments/#activating-the-virtual-environment","title":"Activating the virtual environment","text":"<p>To use the virtual environment, you must activate it.</p>  Virtualenv Anaconda  Windows macOS Linux Activation for Windows<pre><code>env\\Scripts\\activate\n</code></pre> Activation for macOS<pre><code>source env/bin/activate\n</code></pre> Activation for Linux<pre><code>source env/bin/activate\n</code></pre> Activation for Anaconda<pre><code>conda activate env\n</code></pre> <p>After activating your virtual environment, you might see <code>(env)</code> on your terminal before or after your current line. Now you are in your virtual environment!</p>"},{"location":"reference/python/virtual-environments/#installing-dependencies","title":"Installing dependencies","text":"<p>Any dependencies that you install while your virtual environment is activated are only available in your virtual environment. If you deactivate your environment and try to use those dependencies, you will find that you will get errors because they will not be found unless you install those dependencies in the other environment!</p>  Virtualenv Anaconda <p>Use the <code>pip</code> package manager to install python dependencies. Before installing any Python dependencies, it is good practice to upgrade <code>pip</code>:</p> Upgrade pip<pre><code>pip install --upgrade pip\n</code></pre> <p>Now, install any Python dependencies <code>pip</code>:</p> Install dependency with pip<pre><code>pip install &lt;PACKAGE&gt;\n</code></pre> Option 1: pipOption 2: conda <p>Use the <code>pip</code> package manager to install python dependencies.</p> Install dependency with pip<pre><code># Install pip using conda\nconda install pip\n\n# Install python packages using pip\npip install &lt;PACKAGE&gt;\n</code></pre> <p>Use the built-in <code>conda</code> package manager to install python dependencies.</p> Install dependency with conda<pre><code>conda install -c &lt;CHANNEL&gt; &lt;PACKAGE&gt;\n</code></pre> <p>Sometimes, installing a package like this simply won't work because you are not installing from the correct channel. You usually will have to google the command to use in order to install your package correctly because it usually comes from a specific channel that you don't know about. Some common channels to try are:</p> <ul> <li>conda-forge</li> <li>anaconda</li> <li>bioconda</li> <li>r</li> </ul>"},{"location":"reference/python/virtual-environments/#deactivating-the-virtual-environment","title":"Deactivating the virtual environment","text":"<p>When you are finished using your virtual environment, you will need to deactivate it.</p>  Virtualenv Anaconda Deactivate virtualenv environment<pre><code>deactivate\n</code></pre> Deactivate anaconda environment<pre><code>conda deactivate\n</code></pre>"},{"location":"reference/python/virtual-environments/#reproducing-your-virtual-environment","title":"Reproducing your virtual environment","text":"<p>When you want to share your code with others, it is important for others to be able to reproduce the environment that you worked in. We discuss two topics in this section: exporting your environment and reproducing the environment.</p>"},{"location":"reference/python/virtual-environments/#exporting-your-virtual-environment","title":"Exporting your virtual environment","text":"<p>In order to reproduce your virtual environment, you need to export some information about your environment. Be sure to follow the instructions below while your environment is activated.</p>  Virtualenv Anaconda <p>You will create a <code>requirements.txt</code> file, which essentially lists all of your python dependencies in one file:</p> Creating requirements file<pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>The <code>pip freeze</code> command prints all of your pip dependencies, and <code>&gt; requirements.txt</code> redirects the output to a text file.</p> <p>Anaconda uses configuration files to recreate an environment.</p>  Windows macOS Linux <p>Execute the following command to create a file called <code>environment.yml</code>:</p> Create config file<pre><code>conda env export &gt; environment.yml\n</code></pre> <p>Then, open the <code>environment.yml</code> file and delete the line with <code>prefix:</code>.</p> <p>Execute the following command to create a file called <code>environment.yml</code>:</p> Create config file<pre><code>conda env export | grep -v \"^prefix: \" &gt; environment.yml\n</code></pre> <p>Execute the following command to create a file called <code>environment.yml</code>:</p> Create config file<pre><code>conda env export | grep -v \"^prefix: \" &gt; environment.yml\n</code></pre>"},{"location":"reference/python/virtual-environments/#reproducing-the-environment","title":"Reproducing the environment","text":"<p>You can reproduce your virtual environment when given the information about it. The steps above tell you how to extract the information, and now we will use that information to recreate the virtual environment. Remember to deactivate the current environment before making a new environment.</p>  Virtualenv Anaconda <p>We use the <code>requirements.txt</code> file that we generated earlier to recreate the environment.</p> Recreate virtualenv environment<pre><code># Create the new environment\npython -m venv &lt;NEW ENV NAME&gt;\n\n# Activate the environment\nsource &lt;NEW ENV NAME&gt;/bin/activate\n\n# Install dependencies\npip install -r &lt;PATH TO requirements.txt file&gt;\n</code></pre> <p>We use the <code>environment.yml</code> file that we generated earlier to recreate the environment.</p> Recreate the conda environment<pre><code># Create the new environment with the dependencies\nconda env create -f &lt;PATH TO environment.yml&gt; -n &lt;ENV NAME&gt;\n</code></pre>"},{"location":"reference/python/virtual-environments/#official-references","title":"Official references","text":"<p>In this section, we summarized what virtual environments are, why they are used, and how to use them. We did not cover all of the functions of virtual environments, but feel free to consult the official references to learn about virtual environments more in depth.</p> <ul> <li>Virtualenv Reference</li> <li>Anaconda Reference</li> </ul>"},{"location":"reference/sailing/boat_parts/","title":"Parts of a Sailboat","text":"<p>This page names some important parts of a sailboat, and explains what the part is for. Read the descriptions of the parts below, and refer to the image to see where the part fits in.</p> <p></p>"},{"location":"reference/sailing/boat_parts/#hull","title":"Hull","text":"<p>The Hull is the \"boat\" part of the boat, which displaces water to create buoyancy. The following parts of the boat are attached to the hull:</p> <ul> <li>Keel: The keel has a large mass on the end, which keeps the sailboat upright. The fin-like shape of the keel provides lateral resistance to prevent the boat from slipping sideways through the water.</li> <li>Rudder: Raye has two rudders for redundancy. The rudders can angle side to side to steer the boat. To steer the boat effectively, the rudders need enough water flowing over them to create a pressure difference when they angle sideways. Controls sends commands to the rudder to steer the boat.</li> </ul> <p>It is also helpful to know the names of the following \"regions\" of the hull:</p> <ul> <li>Bow: The front of the boat.</li> <li>Stern: The back of the boat.<ul> <li>Aft means \"backwards towards the stern\".</li> </ul> </li> <li>Starboard: The side of the boat which is on the right, for someone standing on the boat facing the bow.</li> <li>Port: The side of the boat which is on the left, for someone standing on the boat facing the bow.<ul> <li>To remember which is which between starboard and port, remember that \"port\" and \"left\" both have 4 letters.</li> </ul> </li> </ul> <p>The image below shows a birds-eye view of the outline of a hull of a sailboat, where the \"regions\" of the hull are labeled.</p> <p></p>"},{"location":"reference/sailing/boat_parts/#jib","title":"Jib","text":"<p>The Jib is the sail located near the bow, and is the smaller of the two sails.</p> <ul> <li>Jib Sheet: In general, sheets are ropes that pull a sail in to the boat, and the jib sheet does this for the jib. On Raye, the jib sheet connects to the back bottom corner of the jib, through a pulley near the bottom of the mast to the Jib Winch. Most sailboats have two jib sheets, one on either side, but Raye is designed differently for autonomy.</li> <li>The Jib Winch is a motor-driven device that tightens or pulls in the jib by pulling on the jib sheet. Controls sends commands to the winches.</li> <li>The jib halyard: In general, a halyard is a rope that pulls a sail up. The jib halyard pulls up the jib. It connects to the top of the jib, runs through a pulley near the top of the mast, and is tied off near the bottom of the mast.</li> </ul>"},{"location":"reference/sailing/boat_parts/#mast","title":"Mast","text":"<p>The Mast is the long vertical pole which connects to hull. It holds up the sails and some instruments.</p> <p>The following instruments are at the top of the mast:</p> <ul> <li>One of the 3 Wind Sensors. The top of the mast is a good location to measure undisturbed wind. Pathfinding and Controls both use data from the wind sensors.</li> <li>The AIS antenna. AIS (\"Autonomous Identification System\") is a system by which ships communicate their location, speed, and other information to surrounding ships via radio signals. Pathfinding uses AIS data to avoid other ships.</li> </ul> <p>The mast is held upright by three lines:</p> <ul> <li>The forestay connects the mast from the top of the jib to the bow, and runs parallel to the front edge of the jib.</li> <li>The two shrouds connect the mast from the top of the jib to the outside edges of the hull slightly aft of the mast. There is one shroud on the startboard side and one on the port side.</li> </ul>"},{"location":"reference/sailing/boat_parts/#main-sail","title":"Main Sail","text":"<p>The Main Sail is the larger of the two sails, and is located aft of the mast. Most of the boat's propulsion comes from the main sail.</p> <ul> <li>The Boom is the horizontal pole that holds the bottom corner of the main sail out from the mast.</li> <li>Main Sheet is the rope that pulls the main sail in towards the center of the boat. It connects from the back end of the boom, through a pulley on the stern, to the Main Winch.</li> <li>The Main Winch is a motor-driven device that pulls in the main sail by pulling on the main sheet. Controls sends commands to the main winch.</li> <li>The main halyard is the line used to hoist the main sail.</li> </ul>"},{"location":"reference/sailing/boat_parts/#conclusion","title":"Conclusion","text":"<p>Hopefully this section helped you gain familiarity with some common sailing terms. It likely feels like this section contains a lot of new information. It's unrealistic to remember it all perfectly, but make an effort to remember the terms which are Bolded and Italicized.</p>"},{"location":"reference/sailing/boat_parts/#keywords-on-this-page","title":"Keywords on this Page","text":"<ul> <li>Hull</li> <li>Keel</li> <li>Rudder</li> <li>Bow</li> <li>Stern</li> <li>Starboard</li> <li>Port</li> <li>Jib</li> <li>Jib winch</li> <li>Mast</li> <li>Wind Sensor</li> <li>AIS Antenna</li> <li>Main Sail</li> <li>Main Winch</li> </ul>"},{"location":"reference/sailing/miscellaneous/","title":"Miscellaneous Sailing Knowledge","text":"<p>This section covers some other useful information.</p>"},{"location":"reference/sailing/miscellaneous/#wind-direction-convention","title":"Wind Direction Convention","text":"<p>Generally speaking, there are two ways to use an angle to describe the wind direction.</p> <ol> <li>The angle tells you which way the wind is blowing towards. For example, 0\u00b0 means the wind is blowing from North to South.</li> <li>The angle tells you which way the wind is coming from. For example, 0\u00b0 means the wind is blowing from South to North.</li> </ol> <p>In sailing, we normally talk about \"where the wind is coming from\". Somehow this ends up being more intuitive when talking about maneuvers or sail angle adjustments.</p> <p>However, when describing the wind as a vector, it can make more sense for the vector to represent the actual speed and direction the air is flowing. Make sure to document which convention you are using in your work when its applicable, and don't be afraid to ask someone to clarify which convention they are using in their work.</p>"},{"location":"reference/sailing/miscellaneous/#navigation-terms","title":"Navigation Terms","text":""},{"location":"reference/sailing/miscellaneous/#heading","title":"Heading","text":"<p>In navigation generally (outside of Sailbot), the Heading is the direction the bow of the boat is pointing towards. Headings are typically (but not always at Sailbot) measured relative to true North in the clockwise direction.</p>"},{"location":"reference/sailing/miscellaneous/#bearing","title":"Bearing","text":"<p>A Bearing is used to describe one point in relation to another: the Bearing of point \"A\" from point \"B\" is the direction you would would look towards if you wanted to see point \"A\" while standing at point \"B\". A Range is the distance between points \"A\" and \"B\", so that a Bearing and Range together can locate point \"A\" relative to point \"B\" in polar co-ordinates. There are two main ways of measuring bearings:</p> <ul> <li>A True Bearing is a bearing where the angle convention is as follows: 0\u00b0 is towards the North, angles increase in the clockwise direction, and angles are typically bounded within [0\u00b0, 360\u00b0)]</li> <li>A Relative Bearing is a bearing where the angle convention is as follows: 0\u00b0 is straight forwards relative to the boat, and angle measurements increase in the clockwise direction. Angles may be bounded in [-180\u00b0, 180\u00b0) or [0\u00b0, 360\u00b0)</li> </ul> <p>In the example below, the boat \"B\" has a Heading (H) of 30\u00b0. The True Bearing (\\(B_t\\)) of the Lighthouse \"A\" from the boat is 90\u00b0. The Relative Bearing (\\(B_r\\)) of the lighthouse from the boat is 60\u00b0.</p> <p></p>"},{"location":"reference/sailing/miscellaneous/#track-made-good","title":"Track Made Good","text":"<p>Boats do not necessarily travel in the same direction as their Heading, due to the effects of ocean current and wind. The direction that the boat moves in relative to the sea floor is called the Track Made Good. This is the same as if you measured motion compared to land or with a GPS.</p> <p></p>"},{"location":"reference/sailing/miscellaneous/#heading-and-bearing-in-raye-project","title":"Heading and Bearing in Raye Project","text":"<p>In Sailbot's Raye project, Heading and Bearing are used to refer to different conventions for describing which way the boat is pointing. The following 3 pieces of information are needed to unambiguously define an angle measuring convention:</p> <ul> <li>What does 0\u00b0 mean? If 0\u00b0 is North, is it towards the North or away from the North?</li> <li>Do the angle measurements increase in the clockwise or counter-clockwise direction?</li> <li>What range should the angles be bounded to? This part is often unimportant if the angles are only used in trigonometry functions.</li> </ul> <p>Some common examples of angle measuring conventions which we use are:</p> <ul> <li>0\u00b0 means towards the East, angles increase in the counter-clockwise direction, and angles are bounded in [-180\u00b0, 180\u00b0). This is effectively the main angle convention used in most math courses.</li> <li>0\u00b0 means towards the North, angles increase in the clockwise direction, and angles are bounded in [0\u00b0, 360\u00b0). This angle convention is more commonly used by navigators.</li> </ul> <p>The specific angle conventions which we call Heading and Bearing can be ambiguous, and may be subject to change, so they are deliberately omitted here. Refer to the applicable source code to determine what the angle conventions are.</p>"},{"location":"reference/sailing/miscellaneous/#true-apparent-and-boat-wind","title":"True, Apparent, and Boat Wind","text":"<ul> <li>True Wind is the wind vector (speed and direction) which you would measure while standing on land (or motionless at sea with unchanging GPS co-ordinates). In sailbot code, this may be referred to as Global Wind. When people refer to \"the wind\", they normally mean True Wind.</li> <li>Boat Wind is the wind vector which you would measure while standing on a moving boat when the True Wind speed is 0. This means that boat wind always blows straight onto the bow of the boat, and the magnitude of the boat wind is equal to the speed of the boat.</li> <li>Apparent Wind is the vector sum of the True Wind and the Boat Wind. This is the wind that you would measure while standing on a moving boat more generally, even if there is non-zero wind. The apparent wind is also what our wind sensors measure, and what our sails feel. In Sailbot code, Apparent Wind may be referred to as Measured Wind.</li> </ul> <p>In the example below, suppose the wind is blowing from the North at 4 m/s, and suppose the boat is moving towards the East at 3 m/s.</p> <ul> <li>The True Wind everywhere is blowing at 4 m/s from the North</li> <li>The Boat Wind onboard the boat is blowing from the East at 3 m/s</li> <li>The Apparent Wind onboard the boat is has a magnitude of \\(\\sqrt{3^2 + 4^2} = 5 \\text{ m/s}\\), and is coming from a true bearing of \\(\\arctan{(\\frac{3}{4})} = 36.9\u00b0\\).</li> </ul> <p></p>"},{"location":"reference/sailing/miscellaneous/#tack","title":"Tack","text":"<p>In the Types of Turn page, we discussed how a Tack is a type of turn. Weirdly, the word \"tack\" actually has two more distinct meanings in sailing. The word \"Tack\" can refer to:</p> <ul> <li>the type of turn, as covered before.</li> <li>Starboard Tack vs Port Tack: The tack is basically the side of the boat which is further upwind. More thoroughly, the tack is the opposite side to the sail. This means that boats change tack when the sail switches sides.<ul> <li>In the diagram below, the 3 boats on the left of the diagram are on Starboard Tack, and the 3 boats on the right side are on Port Tack.</li> <li>The tack of a boat in Irons is undefined.</li> <li>The boat in the diagram on a run is on Port Tack. If the boat continued straight but the sail switched sides into the position shown by the dashed line, the boat would be on Starboard Tack.</li> </ul> </li> </ul> <p></p> <ul> <li>Finally, the Tack can refer to particular region of the main sail. This is not important for software members.</li> </ul>"},{"location":"reference/sailing/miscellaneous/#keywords-on-this-page","title":"Keywords on this Page","text":"<ul> <li>Heading</li> <li>Bearing</li> <li>Track Made Good</li> <li>Global Wind (aka True Wind)</li> <li>Measured Wind (aka Apparent Wind)</li> <li>Tack</li> </ul>"},{"location":"reference/sailing/overview/","title":"Sailing Knowledge Section Overview","text":"<p>In order to make high-quality contributions to Sailbot's Software teams, it is extremely helpful to have some understanding of sailing. This section introduces important parts of a sailboat, explains the 4 types of turns, discusses upwind and downwind sailing, and covers some other helpful knowledge.</p> <p>In this section, terms which are Bolded and Italicized are the most important terms to know. These terms are listed at the bottom of each page. Terms that are only Italicized are other helpful sailing terms. Words that are bolded are meant to be emphasized, but are not necessarily considered important vocabulary.</p>"},{"location":"reference/sailing/points_of_sail/","title":"Points of Sail","text":"<p>In sailing, we sometimes talk about different angles that we can sail on with respect to the wind. Ranges of angles which are close together have special names. These ranges are called points of sail. The discussion below coveres the most important points of sail for software members to understand.</p> <p>Notice how for higher points of sail (points of sail closer to straight into the wind), the sail is pulled tightly in to the boat. If the boat is on a lower point of sail, the sails should be let further out of the boat. For any point of sail, there is an optimum angle that the sail should be adjusted to. If the sails are adjusted too far in or too far out, the boat will not go as fast as it could if the sails were adjusted correctly.</p> <p></p>"},{"location":"reference/sailing/points_of_sail/#irons","title":"Irons","text":"<p>The range of angles where the boat is roughly pointing straight into the wind are called Irons, or the No-Go Zone. If the boat is pointing in these directions, the sails will be flapping regardless of how the sheets are adjusted. When the sails are flapping, they are not catching the wind in a way that can propell the boat forwards. When the boat looses propulsion, water stops flowing over the rudder, and the boat loses steering. This is why we want our sailbots to avoid being stuck in irons.</p>"},{"location":"reference/sailing/points_of_sail/#upwind-sailing","title":"Upwind Sailing","text":"<p>If we want to sail to a destination that is not on too high or low of an angle upwind or downwind from our starting position, we can just point our boat in that direction, adjust our sails, and go there.</p> <p>However, sometimes we want to sail to a destination that is straight upwind of our starting position. To get there, we will need to do upwind sailing. Since we can't point our boat directly into the wind, we need to sail on an angle on the edge of irons. We will need to tack back and forth every now and then if we want to go directly upwind. The point of sail on the edge of Irons is called Close Hauled.</p>"},{"location":"reference/sailing/points_of_sail/#downwind-sailing","title":"Downwind Sailing","text":"<p>Raye also avoids sailing straight downwind. This means that to reach a goal downwind of the starting position, we need to gybe back and forth in a zig-zag pattern. The point of sail straight downwind is called a run, and the next point of sail higher than a run is called a broad reach.</p> <p></p>"},{"location":"reference/sailing/points_of_sail/#keywords-on-this-page","title":"Keywords on this Page","text":"<ul> <li>Irons (aka No-Go Zone)</li> <li>Upwind Sailing</li> <li>Close Hauled</li> <li>Downwind Sailing</li> </ul>"},{"location":"reference/sailing/turning/","title":"Types of Turns","text":"<p>In sailing, there are 4 distinct types of turns. Read the descriptions below, and observe how they fit into the diagrams.</p> <p>Note that any of these types of turn can be done in either the clockwise or counter-clockwise directions.</p>"},{"location":"reference/sailing/turning/#classifying-types-of-turns-summary","title":"Classifying Types Of Turns Summary","text":"<p>The following flowchart summarizes how to distinguish between different types of turns. Note:</p> <ul> <li>to point higher means to steer your boat to point in a direction closer to straight into the wind</li> <li>to point lower means to steer your boat to point in a direction closer towards to straight downwind</li> </ul> <pre><code>graph LR\n    B[Classify a Turn] --&gt; C{Does the sail change&lt;br/&gt;sides during the turn?};\n    C --&gt; |Yes| E{Which end of&lt;br/&gt;the boat is upwind&lt;br/&gt;during the turn?};\n    C --&gt; |No| D{Does the&lt;br/&gt;boat point higher&lt;br/&gt;or lower at the end&lt;br/&gt;of the turn?};\n    D --&gt; |Higher| F[Heading Up];\n    D --&gt; |Lower| G[Bearing Off];\n    E --&gt; |Bow| H[Tack];\n    E --&gt; |Stern| I[Gybe];</code></pre> <p>The diagrams in this section show outlines of the hull of a boat and its main sail going through turns. As is common in these types of diagrams, assume that the wind is blowing down from the top of the screen unless there is an arrow that indicates otherwise.</p> <p></p>"},{"location":"reference/sailing/turning/#heading-up","title":"Heading Up","text":"<p>When the boat makes any turn as follows, it is called Heading Up:</p> <ul> <li>At the end of the turn, the boat is pointing higher.</li> <li>Throughout the turn, the sails stay on the same side of the boat. In other words, the sails do not cross between the starboard and port sides.</li> </ul> <p>Unlike some of the other turns listed here, heading up can be a large turn or a small course adjustment of just a few degrees.</p> <p>The image below shows a boat heading up. Notice how the sail stays on the starboard side of the boat.</p> <p></p>"},{"location":"reference/sailing/turning/#bearing-off","title":"Bearing Off","text":"<p>When the boat makes any turn as follows, it is called Bearing Off:</p> <ul> <li>At the end of the turn, the boat is pointing lower.</li> <li>Throughout the turn, the sails stays on the same side of the boat (port or starboard).</li> </ul> <p>Like heading up, bearing off can be a small course adjustment.</p> <p></p>"},{"location":"reference/sailing/turning/#tacking","title":"Tacking","text":"<p>When the boat makes any turn as follows, it is called a Tack or Tacking:</p> <ul> <li>The sails change sides.</li> <li>Through the turn, the wind hits the bow of the boat before the stern. You can also say that the bow is upwind or windward of the stern.</li> </ul> <p>Notice how at some point throughout this turn, the boat will be pointing straight into the wind. While the boat points nearly straight into the wind, the sails don't generate any forward propulsion. This means that a tack must be a large (at least ~90\u00b0) turn all at once, so that the boat's momentum carries it through the range of angles where it does not get propulsion.</p> <p></p>"},{"location":"reference/sailing/turning/#gybing","title":"Gybing","text":"<p>When the boat makes any turn as follows, it is called a Gybe or Gybing.</p> <ul> <li>The sails change sides.</li> <li>Through the turn, the wind hits the stern of the boat before the bow. You can also say that the bow of the boat is downwind or leeward of the stern.</li> </ul> <p>When sailing on most angles relative to the wind, the sail is always blown to the downwind side of the boat. However, sailing nearly straight downwind, both sides of the boat are equally \"downwind\" relative to eachother. This means that the sail can be on either side of the boat.</p> <p>The sail propells the boat throughout a gybe, so it is possible to conduct the turn more gradually than a tack. However, because the sail can be on either side, the sails can switch sides in an uncontrolled way as the boat moves in the waves. For this reason, Raye avoids sailing on angles close to straight downwind, and gybes by doing a quick ~60\u00b0 turn.</p> <p>Note that \"gybe\" is the spelling used in Canadian and British english, whereas in American english it is spelled \"Jibe\"</p> <p></p>"},{"location":"reference/sailing/turning/#combinations-of-turns","title":"Combinations of Turns","text":"<p>Of course, it is possible to do two or more of these types of turns in one continuous motion. What two types of turns does the boat do in the image below?</p> <p></p> <p>Answer: In the turn shown by the first arrow, the sail stays on the port side of the boat while it steers to point further downwind. This means that the first part of the maneuver is bearing off. In the next part of the maneuver, the sail changes sides and the stern of the boat is upwind of the bow. This part of the maneuver is a gybe.</p>"},{"location":"reference/sailing/turning/#keywords-on-this-page","title":"Keywords on this Page","text":"<ul> <li>Higher (in relation to pointing)</li> <li>Lower (in relation to pointing)</li> <li>Heading Up</li> <li>Bearing Off</li> <li>Tack</li> <li>Gybe (aka Jibe)</li> </ul>"}]}