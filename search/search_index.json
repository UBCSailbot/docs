{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UBCSailbot Software Team Docs \u00b6","title":"Home"},{"location":"#ubcsailbot-software-team-docs","text":"","title":"UBCSailbot Software Team Docs"},{"location":"reference/","text":"UBCSailbot Software Reference \u00b6","title":"UBCSailbot Software Reference"},{"location":"reference/#ubcsailbot-software-reference","text":"","title":"UBCSailbot Software Reference"},{"location":"reference/markdown/","text":"Markdown \u00b6 Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. 1 You can do anything with Markdown, from creating websites to PDF documents, all in a clean format that is easy to learn. Many of your favorite services use Markdown , so it would be useful to pick it up to write technical documentation. Markdown is not standardized across services. Many services that support Markdown have their own \"flavour\" of Markdown. Be sure to know the Markdown features of the service you are using so that your Markdown renders properly. Getting Started \u00b6 We recommend markdownguide.org to be your first point of reference if you are learning Markdown for the first time. It covers topics like what Markdown is, its syntax, advanced tips, and the different services that support Markdown. Flavours of Markdown specific to a service build on top of these basics. Sailbot and Markdown \u00b6 We write Markdown for GitHub and Material for MkDocs. The following sections detail how Markdown is used in these services. GitHub \u00b6 We use Markdown in GitHub for technical documentation and collaboration. This includes: README.md files Issues Pull Requests Almost all places where text is written in GitHub support Markdown. GitHub also allows you to preview your Markdown before you submit any comments. Before Rendering After Rendering The image above shows an example of a \"write\" and a \"preview\" tab for writing a comment on an issue. It might look different depending on where you are writing, but there usually exists a preview option! GitHub-Flavoured Markdown GitHub uses its own \"flavour\" of Markdown. Certain features, like using HTML, are excluded for security reasons. Visit the official GitHub Markdown guide for more information on the available features. Material for MkDocs \u00b6 We use Markdown in Material for MkDocs to create this website! Since it is written in Markdown, no frontend experience is required to contribute to our docs. Material for MkDocs supports powerful features purpose-built to take technical documentation to the next level. Feel free to browse this site to see how we use these features, exploring their syntax in the source code . Since GitHub renders Markdown files automatically you will need to click the \"Raw\" button to view their contents. Material-Flavoured Markdown Material for MkDocs' flavour of Markdown extends upon vanilla Markdown, adding features such as admonitions (like this note) and content tabs. Refer to the official Material for MkDocs reference page for more information on the available features. Rendering Markdown \u00b6 You have a few choices to render Markdown on your computer. Be advised that if you are using an extended version of Markdown, you will need to consult the documentation from the service provider to render their flavour of Markdown properly. The following resources are good for rendering Markdown: Vanilla Github Material for MkDocs VS Code : Markdown rendering is supported out of the box. Markdown Live Preview : An online rendering tool. Markdown Preview GitHub Styling : VS Code extension that renders GitHub-flavoured markdown. Create a draft issue on GitHub and preview the markdown to see how it renders. UBC Sailbot Docs: To preview your changes when working on this site, refer to the run instructions in the README.md . Material for MkDocs sites in general: If you ever decide to write your own documentation using Material for MkDocs, refer to the official \"Getting Started\" guide . Other resources exist to render Markdown like browser extensions that render Markdown as HTML and GitHub repositories that contain source code to render your Markdown. Feel free to browse around for the solution that suits your needs. Linting \u00b6 We lint our Markdown files to reduce errors and increase readability. In particular, we use two tools: markdownlint is used to enforce a style guide. Its configuration file for this repository is .markdownlint.json . If you use VS Code, there is a markdownlint extension . markdown-link-check is used to check for broken links. Its configuration file for this repository is .markdown-link-check.json . https://www.markdownguide.org/getting-started/ \u21a9","title":"Markdown"},{"location":"reference/markdown/#markdown","text":"Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. 1 You can do anything with Markdown, from creating websites to PDF documents, all in a clean format that is easy to learn. Many of your favorite services use Markdown , so it would be useful to pick it up to write technical documentation. Markdown is not standardized across services. Many services that support Markdown have their own \"flavour\" of Markdown. Be sure to know the Markdown features of the service you are using so that your Markdown renders properly.","title":"Markdown"},{"location":"reference/markdown/#getting-started","text":"We recommend markdownguide.org to be your first point of reference if you are learning Markdown for the first time. It covers topics like what Markdown is, its syntax, advanced tips, and the different services that support Markdown. Flavours of Markdown specific to a service build on top of these basics.","title":"Getting Started"},{"location":"reference/markdown/#sailbot-and-markdown","text":"We write Markdown for GitHub and Material for MkDocs. The following sections detail how Markdown is used in these services.","title":"Sailbot and Markdown"},{"location":"reference/markdown/#github","text":"We use Markdown in GitHub for technical documentation and collaboration. This includes: README.md files Issues Pull Requests Almost all places where text is written in GitHub support Markdown. GitHub also allows you to preview your Markdown before you submit any comments. Before Rendering After Rendering The image above shows an example of a \"write\" and a \"preview\" tab for writing a comment on an issue. It might look different depending on where you are writing, but there usually exists a preview option! GitHub-Flavoured Markdown GitHub uses its own \"flavour\" of Markdown. Certain features, like using HTML, are excluded for security reasons. Visit the official GitHub Markdown guide for more information on the available features.","title":"GitHub"},{"location":"reference/markdown/#material-for-mkdocs","text":"We use Markdown in Material for MkDocs to create this website! Since it is written in Markdown, no frontend experience is required to contribute to our docs. Material for MkDocs supports powerful features purpose-built to take technical documentation to the next level. Feel free to browse this site to see how we use these features, exploring their syntax in the source code . Since GitHub renders Markdown files automatically you will need to click the \"Raw\" button to view their contents. Material-Flavoured Markdown Material for MkDocs' flavour of Markdown extends upon vanilla Markdown, adding features such as admonitions (like this note) and content tabs. Refer to the official Material for MkDocs reference page for more information on the available features.","title":"Material for MkDocs"},{"location":"reference/markdown/#rendering-markdown","text":"You have a few choices to render Markdown on your computer. Be advised that if you are using an extended version of Markdown, you will need to consult the documentation from the service provider to render their flavour of Markdown properly. The following resources are good for rendering Markdown: Vanilla Github Material for MkDocs VS Code : Markdown rendering is supported out of the box. Markdown Live Preview : An online rendering tool. Markdown Preview GitHub Styling : VS Code extension that renders GitHub-flavoured markdown. Create a draft issue on GitHub and preview the markdown to see how it renders. UBC Sailbot Docs: To preview your changes when working on this site, refer to the run instructions in the README.md . Material for MkDocs sites in general: If you ever decide to write your own documentation using Material for MkDocs, refer to the official \"Getting Started\" guide . Other resources exist to render Markdown like browser extensions that render Markdown as HTML and GitHub repositories that contain source code to render your Markdown. Feel free to browse around for the solution that suits your needs.","title":"Rendering Markdown"},{"location":"reference/markdown/#linting","text":"We lint our Markdown files to reduce errors and increase readability. In particular, we use two tools: markdownlint is used to enforce a style guide. Its configuration file for this repository is .markdownlint.json . If you use VS Code, there is a markdownlint extension . markdown-link-check is used to check for broken links. Its configuration file for this repository is .markdown-link-check.json . https://www.markdownguide.org/getting-started/ \u21a9","title":"Linting"},{"location":"reference/ros/","text":"Robot Operating System \u00b6 Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. 1 It provides functionality for hardware abstraction, device drivers, communication between processes over multiple machines, tools for testing and visualization, and much more. 2 We use ROS because it is open-source, language-agnostic, and built with cross-collaboration in mind. It enables our sub-teams to work independently on well-defined components of our software system without having to worry about the hardware it runs on or the implementation of other components. The official ROS 2 documentation contains everything you need to get started using ROS. From it we have hand-picked the resources that are most relevant to our current and expected future usage of ROS assuming that you use our preconfigured workspace . To run our software on your device without our workspace, you would have to install ROS and the dependencies that are in our Docker images yourself. Workspace Configuration \u00b6 To get our workspace configuration running on your computer: Set it up by following the setup instructions Uncomment the ROS 2 tutorials section in .devcontainer/Dockerfile , then run the \"Dev Containers: Rebuild Container\" VS Code command, to install the tutorials' dependencies Uncomment the ROS 2 tutorials section in src/new_project.repos , then run the \"setup\" VS Code task, to clone the repositories used in the tutorials Our workspace configuration contains easier methods of accomplishing some of the tutorial steps, or eliminates the need for them altogether. Tutorial sailbot_workspace Install a package All packages used in the tutorials are already installed (step 2 above) Clone a sample repo (ros_tutorials) ros_tutorials is already cloned (step 3 above) Resolve dependencies Run the \"install dependencies\" VS Code task Build the workspace Run the \"Build\" VS Code task, AKA Ctrl + Shift + B Source the overlay Run the srcnew terminal command Create a package with a node Run the \"new ament_(python|cmake) package with a node\" VS Code task Tutorials \u00b6 We encourage all software members to work through the tutorials listed below in order. For tutorials that have both C++ and Python versions, NET members should do the C++ version while CTRL and PATH members should do the Python version. CLI Tools Introducing turtlesim and rqt Understanding ROS 2 nodes Understanding ROS 2 topics Understanding ROS 2 services Understanding ROS 2 parameters Understanding ROS 2 actions Using rqt_console Recording and playing back data Client Libraries Creating a workspace Creating your first ROS 2 package Writing a simple publisher and subscriber (C++ or Python) Writing a simple service and client (C++ or Python) Using parameters in a class (C++ or Python) Getting started with ros2doctor Concepts \u00b6 We encourage all software members to read the following documentation on key ROS concepts: About logging and logger configuration ROS 1 Bridge \u00b6 There are two major versions of ROS, aptly named ROS 1 and ROS 2. Our previous project, Raye, uses ROS 1 because it was the only version available during her design process. Our new project will use ROS 2, a complete re-design of the framework that tackles the shortcomings of ROS 1 to bring it up to industry needs and standards. 3 If you are curious about the changes made in ROS 2 compared to 1, this article is a worthwhile read. ROS 2 includes the ROS 1 Bridge, a collection of packages that can be installed alongside ROS 1 to help migrate code from ROS 1 to ROS 2. As we will be reusing parts of Raye's codebase, it is essential to know how to use these packages. Until we are completely done with Raye, our preconfigured workspace will have ROS 1, ROS 1 Bridge, and ROS 2 installed. We encourage all software members work through the ROS 1 Bridge README . For PATH members, the Migrating launch files from ROS 1 to ROS 2 page will be a helpful reference when we do so. https://docs.ros.org/en/humble/index.html \u21a9 https://www.toptal.com/robotics/introduction-to-robot-operating-system \u21a9 https://ubuntu.com/robotics/what-is-ros \u21a9","title":"Robot Operating System"},{"location":"reference/ros/#robot-operating-system","text":"Robot Operating System (ROS) is a set of software libraries and tools for building robot applications. 1 It provides functionality for hardware abstraction, device drivers, communication between processes over multiple machines, tools for testing and visualization, and much more. 2 We use ROS because it is open-source, language-agnostic, and built with cross-collaboration in mind. It enables our sub-teams to work independently on well-defined components of our software system without having to worry about the hardware it runs on or the implementation of other components. The official ROS 2 documentation contains everything you need to get started using ROS. From it we have hand-picked the resources that are most relevant to our current and expected future usage of ROS assuming that you use our preconfigured workspace . To run our software on your device without our workspace, you would have to install ROS and the dependencies that are in our Docker images yourself.","title":"Robot Operating System"},{"location":"reference/ros/#workspace-configuration","text":"To get our workspace configuration running on your computer: Set it up by following the setup instructions Uncomment the ROS 2 tutorials section in .devcontainer/Dockerfile , then run the \"Dev Containers: Rebuild Container\" VS Code command, to install the tutorials' dependencies Uncomment the ROS 2 tutorials section in src/new_project.repos , then run the \"setup\" VS Code task, to clone the repositories used in the tutorials Our workspace configuration contains easier methods of accomplishing some of the tutorial steps, or eliminates the need for them altogether. Tutorial sailbot_workspace Install a package All packages used in the tutorials are already installed (step 2 above) Clone a sample repo (ros_tutorials) ros_tutorials is already cloned (step 3 above) Resolve dependencies Run the \"install dependencies\" VS Code task Build the workspace Run the \"Build\" VS Code task, AKA Ctrl + Shift + B Source the overlay Run the srcnew terminal command Create a package with a node Run the \"new ament_(python|cmake) package with a node\" VS Code task","title":"Workspace Configuration"},{"location":"reference/ros/#tutorials","text":"We encourage all software members to work through the tutorials listed below in order. For tutorials that have both C++ and Python versions, NET members should do the C++ version while CTRL and PATH members should do the Python version. CLI Tools Introducing turtlesim and rqt Understanding ROS 2 nodes Understanding ROS 2 topics Understanding ROS 2 services Understanding ROS 2 parameters Understanding ROS 2 actions Using rqt_console Recording and playing back data Client Libraries Creating a workspace Creating your first ROS 2 package Writing a simple publisher and subscriber (C++ or Python) Writing a simple service and client (C++ or Python) Using parameters in a class (C++ or Python) Getting started with ros2doctor","title":"Tutorials"},{"location":"reference/ros/#concepts","text":"We encourage all software members to read the following documentation on key ROS concepts: About logging and logger configuration","title":"Concepts"},{"location":"reference/ros/#ros-1-bridge","text":"There are two major versions of ROS, aptly named ROS 1 and ROS 2. Our previous project, Raye, uses ROS 1 because it was the only version available during her design process. Our new project will use ROS 2, a complete re-design of the framework that tackles the shortcomings of ROS 1 to bring it up to industry needs and standards. 3 If you are curious about the changes made in ROS 2 compared to 1, this article is a worthwhile read. ROS 2 includes the ROS 1 Bridge, a collection of packages that can be installed alongside ROS 1 to help migrate code from ROS 1 to ROS 2. As we will be reusing parts of Raye's codebase, it is essential to know how to use these packages. Until we are completely done with Raye, our preconfigured workspace will have ROS 1, ROS 1 Bridge, and ROS 2 installed. We encourage all software members work through the ROS 1 Bridge README . For PATH members, the Migrating launch files from ROS 1 to ROS 2 page will be a helpful reference when we do so. https://docs.ros.org/en/humble/index.html \u21a9 https://www.toptal.com/robotics/introduction-to-robot-operating-system \u21a9 https://ubuntu.com/robotics/what-is-ros \u21a9","title":"ROS 1 Bridge"},{"location":"reference/cpp/","text":"Getting Started \u00b6 UBC Sailbot's Network Systems team uses C++ for its software. If you know already know C, then you already know the bare minimum to write C++. This is a good starting point, but the additional features C++ provides allow for safer programming practices. For C/C++ Beginners \u00b6 If you just need to know how C++ is different from C, then see the Differences Between C and C++ . You should also look at it if you go through and finish this section. If you are new to C and C++, then this the best place to start. The tutorials provided in this section will help you learn the fundamentals of the language. Do not feel pressured to do all the tutorials! Just get comfortable with the syntax and the mechanisms of the language. Note The hardest part about this will likely be pointers and dynamic memory, so pay close attention to tutorials concerning them! Additionally, dynamic memory requires the usage of pointers, but pointers do not require dynamic memory! Tip Dynamic memory is much more prone to error than statically allocated memory, so try to use static allocation whenever possible Resource Description w3schools Tutorial A structured tutorial that goes through basic concepts in C++. It's good to do up to the section on Classes. YouTube Tutorial If you prefer video tutorial, then this is a comprehensive 4 hour video covering similar concepts to the one above. It is 4 hours long though. Dynamic Memory Overview A page going over how dynamic memory works in C++. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"Getting Started"},{"location":"reference/cpp/#getting-started","text":"UBC Sailbot's Network Systems team uses C++ for its software. If you know already know C, then you already know the bare minimum to write C++. This is a good starting point, but the additional features C++ provides allow for safer programming practices.","title":"Getting Started"},{"location":"reference/cpp/#for-cc-beginners","text":"If you just need to know how C++ is different from C, then see the Differences Between C and C++ . You should also look at it if you go through and finish this section. If you are new to C and C++, then this the best place to start. The tutorials provided in this section will help you learn the fundamentals of the language. Do not feel pressured to do all the tutorials! Just get comfortable with the syntax and the mechanisms of the language. Note The hardest part about this will likely be pointers and dynamic memory, so pay close attention to tutorials concerning them! Additionally, dynamic memory requires the usage of pointers, but pointers do not require dynamic memory! Tip Dynamic memory is much more prone to error than statically allocated memory, so try to use static allocation whenever possible Resource Description w3schools Tutorial A structured tutorial that goes through basic concepts in C++. It's good to do up to the section on Classes. YouTube Tutorial If you prefer video tutorial, then this is a comprehensive 4 hour video covering similar concepts to the one above. It is 4 hours long though. Dynamic Memory Overview A page going over how dynamic memory works in C++. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"For C/C++ Beginners"},{"location":"reference/cpp/differences/","text":"Differences Between C and C++ \u00b6 For most use cases, you can think of C++ as a superset of C. While this is not technically true, more often than not you are able to write standard C code for a C++ program without issues. However, doing so ignores a lot of the benefits and reasons to use C++. Classes and Structs \u00b6 In C structs can only contain member variables, but in C++ structs are basically classes but with a default member visibility of public instead of private. Example The following code blocks are equivalent. struct foo { private : int x ; void helper ( void ); public : foo ( int y ); } class foo { private : int x ; void helper ( void ); public : foo ( int y ); } Namespaces \u00b6 One problem that is prevalent in C concerns the scoping of names. For example, let there be two files A.h and B.h and a program ighxy.c , and let them both contain a float x and int bar(void) . Our program cannot compile because the linker cannot distinguish which bar() function we want to use! One way to fix this in a C program would be to rename them a_bar() and b_bar() . Although this fix seems trivial for this example, applying it to a file that has potentially 100 functions can be a lot more difficult, especially if two files just happen to share the same prefix for their functions! C++ introduces namespaces to tackle this problem. With namespaces, we can deal with naming conflicts much more easily. Though be aware that namespaces are not necessary everywhere. See the following code snippet to see how they work. Example C C++ A.h float x ; int bar ( void ); B.h float x ; int bar ( void ); ighxy.c #include \"A.h\" #include \"B.h\" int main ( void ) { int a = bar (); ... } /* Error, does not compile*/ A.h namespace a { float x ; int bar ( void ); } B.h namespace b { float x ; int bar ( void ); } ighxy.cpp #include \"A.h\" #include \"B.h\" int main ( void ) { int a = a :: bar (); int b = b :: bar (); float xa = a :: x ; float xb = b :: x ; /* No problem! */ ... } Warning You may come across something like: example.cpp using namespace std ; namespace io = std :: filesystem ; int main ( int argc , char * argv []) { bool isDirectory = io :: is_directory ( argv [ 1 ]); // Equivalent to std::filesystem::is_directory(argv[1]) cout << isDirectory << endl ; return 0 ; } There are two things going on here. First, using namespace std makes all functions and types defined within the standard namespace and included via #include directives visible to example.cpp . If you are familiar with Python, the Python equivalent of this would be import std as * . However, it is considered bad practice to do this as it eliminates the point of using namespaces. OK Not OK class string { // Insert implementation here } int main ( void ) { string ourString = \"Our own string implementation\" ; std :: string stdString = \"Standard Library string implementation\" ; ... } using namespace std ; // ERROR - multiple definitions of type string class string { } The compiler cannot infer which implementation we want. Secondly, namespace io = std::filesystem is basically an alias for the std::filesystem namespace. This practice is acceptable for long namespace identifiers, but be careful as it can still run into namespace conflicts if your alias is the same as another namespace or alias. Constant Expressions \u00b6 In C, if we want to declare a constant or a function/expression that we want to be evaluated at compile time, we need to use #define statements. One of the problems with #define statements is that they perform a simple copy paste wherever they're used. For example: Before Precompile After Precompile #define PI 3.14F #define AREA_OF_CIRCLE(radius) ((PI) * (radius) * (radius)) int main ( void ) { float area = AREA_OF_CIRCLE ( 2.5F ); ... } int main ( void ) { float area = (( 3.14F ) * ( 2.5F ) * ( 2.5F )); ... } Note AREA_OF_CIRCLE is a macro with arguments. If you are confused by it, this resource has a detailed explanation on how they work. Because of this copy-pasting, you need to be very careful with syntax, sometimes necessitating an ugly do {} while(0) wrapper . Moreover, symbols declared with #define are always globally visible, ignoring namespaces! In C++, the use of constant expressions are preferred. constexpr float pi = 3.14F ; constexpr float area_of_circle ( float radius ) { return pi * radius * radius ; } Constant expressions do not get copy pasted, and are instead placed in program memory just like a normal variable or function. They also respect namespaces and function scopes, meaning the following code compiles. Constant Expression Scoping void foo ( void ) { constexpr float rand = 123.456 ; ... } void bar ( void ) { constexpr float rand = 789.123 ; ... } Lambdas \u00b6 Lambdas are primarily useful when you need to register a callback function one time and don't feel it's necessary to write out a full function. They are in no way required though, so do not worry about learning them. However, it's necessary to know that they exist such that you don't get confused when reading code. For more information, go here for Microsoft's explanation. Misc \u00b6 Arrays \u00b6 Using the C++ implementation of arrays is preferred over C arrays. It is simply easier and safer to work with than a standard C array without any performance costs. Example Passing an array to a function an iterating over it C C++ #include \"stdio.h\" void print_contents ( int * arr , int size ) { for ( int i = 0 ; i < size ; i ++ ) { printf ( \"%d \\n \" , * arr ); } } int main ( void ) { int arr [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; foo ( arr , 5 ); return 0 ; } We can't even guarantee that the integer pointer arr is an array! C++ 20 makes passing arrays around a lot simpler. Do not worry about understanding the code shown below. It uses some fairly advanced concepts and exists to illustrate how different such a simple operation can be. #include <iostream> #include <array> #include <span> void print_contents ( std :: span < int > container ) { for ( const auto & e : container ) { std :: cout << e << std :: endl ; } } int main ( void ) { std :: array < int , 5 > arr = { 0 , 1 , 2 , 3 , 4 }; foo ( arr ); return 0 ; } The advantages of the C++ version are: Size is implicitly part of the object We guarantee that foo takes a container, but it does not care if it's an array or, say, a vector, which is preferable in this scenario where we simply iterate through the container's existing elements","title":"Differences"},{"location":"reference/cpp/differences/#differences-between-c-and-c","text":"For most use cases, you can think of C++ as a superset of C. While this is not technically true, more often than not you are able to write standard C code for a C++ program without issues. However, doing so ignores a lot of the benefits and reasons to use C++.","title":"Differences Between C and C++"},{"location":"reference/cpp/differences/#classes-and-structs","text":"In C structs can only contain member variables, but in C++ structs are basically classes but with a default member visibility of public instead of private. Example The following code blocks are equivalent. struct foo { private : int x ; void helper ( void ); public : foo ( int y ); } class foo { private : int x ; void helper ( void ); public : foo ( int y ); }","title":"Classes and Structs"},{"location":"reference/cpp/differences/#namespaces","text":"One problem that is prevalent in C concerns the scoping of names. For example, let there be two files A.h and B.h and a program ighxy.c , and let them both contain a float x and int bar(void) . Our program cannot compile because the linker cannot distinguish which bar() function we want to use! One way to fix this in a C program would be to rename them a_bar() and b_bar() . Although this fix seems trivial for this example, applying it to a file that has potentially 100 functions can be a lot more difficult, especially if two files just happen to share the same prefix for their functions! C++ introduces namespaces to tackle this problem. With namespaces, we can deal with naming conflicts much more easily. Though be aware that namespaces are not necessary everywhere. See the following code snippet to see how they work. Example C C++ A.h float x ; int bar ( void ); B.h float x ; int bar ( void ); ighxy.c #include \"A.h\" #include \"B.h\" int main ( void ) { int a = bar (); ... } /* Error, does not compile*/ A.h namespace a { float x ; int bar ( void ); } B.h namespace b { float x ; int bar ( void ); } ighxy.cpp #include \"A.h\" #include \"B.h\" int main ( void ) { int a = a :: bar (); int b = b :: bar (); float xa = a :: x ; float xb = b :: x ; /* No problem! */ ... } Warning You may come across something like: example.cpp using namespace std ; namespace io = std :: filesystem ; int main ( int argc , char * argv []) { bool isDirectory = io :: is_directory ( argv [ 1 ]); // Equivalent to std::filesystem::is_directory(argv[1]) cout << isDirectory << endl ; return 0 ; } There are two things going on here. First, using namespace std makes all functions and types defined within the standard namespace and included via #include directives visible to example.cpp . If you are familiar with Python, the Python equivalent of this would be import std as * . However, it is considered bad practice to do this as it eliminates the point of using namespaces. OK Not OK class string { // Insert implementation here } int main ( void ) { string ourString = \"Our own string implementation\" ; std :: string stdString = \"Standard Library string implementation\" ; ... } using namespace std ; // ERROR - multiple definitions of type string class string { } The compiler cannot infer which implementation we want. Secondly, namespace io = std::filesystem is basically an alias for the std::filesystem namespace. This practice is acceptable for long namespace identifiers, but be careful as it can still run into namespace conflicts if your alias is the same as another namespace or alias.","title":"Namespaces"},{"location":"reference/cpp/differences/#constant-expressions","text":"In C, if we want to declare a constant or a function/expression that we want to be evaluated at compile time, we need to use #define statements. One of the problems with #define statements is that they perform a simple copy paste wherever they're used. For example: Before Precompile After Precompile #define PI 3.14F #define AREA_OF_CIRCLE(radius) ((PI) * (radius) * (radius)) int main ( void ) { float area = AREA_OF_CIRCLE ( 2.5F ); ... } int main ( void ) { float area = (( 3.14F ) * ( 2.5F ) * ( 2.5F )); ... } Note AREA_OF_CIRCLE is a macro with arguments. If you are confused by it, this resource has a detailed explanation on how they work. Because of this copy-pasting, you need to be very careful with syntax, sometimes necessitating an ugly do {} while(0) wrapper . Moreover, symbols declared with #define are always globally visible, ignoring namespaces! In C++, the use of constant expressions are preferred. constexpr float pi = 3.14F ; constexpr float area_of_circle ( float radius ) { return pi * radius * radius ; } Constant expressions do not get copy pasted, and are instead placed in program memory just like a normal variable or function. They also respect namespaces and function scopes, meaning the following code compiles. Constant Expression Scoping void foo ( void ) { constexpr float rand = 123.456 ; ... } void bar ( void ) { constexpr float rand = 789.123 ; ... }","title":"Constant Expressions"},{"location":"reference/cpp/differences/#lambdas","text":"Lambdas are primarily useful when you need to register a callback function one time and don't feel it's necessary to write out a full function. They are in no way required though, so do not worry about learning them. However, it's necessary to know that they exist such that you don't get confused when reading code. For more information, go here for Microsoft's explanation.","title":"Lambdas"},{"location":"reference/cpp/differences/#misc","text":"","title":"Misc"},{"location":"reference/cpp/differences/#arrays","text":"Using the C++ implementation of arrays is preferred over C arrays. It is simply easier and safer to work with than a standard C array without any performance costs. Example Passing an array to a function an iterating over it C C++ #include \"stdio.h\" void print_contents ( int * arr , int size ) { for ( int i = 0 ; i < size ; i ++ ) { printf ( \"%d \\n \" , * arr ); } } int main ( void ) { int arr [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; foo ( arr , 5 ); return 0 ; } We can't even guarantee that the integer pointer arr is an array! C++ 20 makes passing arrays around a lot simpler. Do not worry about understanding the code shown below. It uses some fairly advanced concepts and exists to illustrate how different such a simple operation can be. #include <iostream> #include <array> #include <span> void print_contents ( std :: span < int > container ) { for ( const auto & e : container ) { std :: cout << e << std :: endl ; } } int main ( void ) { std :: array < int , 5 > arr = { 0 , 1 , 2 , 3 , 4 }; foo ( arr ); return 0 ; } The advantages of the C++ version are: Size is implicitly part of the object We guarantee that foo takes a container, but it does not care if it's an array or, say, a vector, which is preferable in this scenario where we simply iterate through the container's existing elements","title":"Arrays"},{"location":"reference/cpp/tools/","text":"Tools \u00b6 A lot goes into making a well structured C++ project, much more than any one team should have to do. CMake \u00b6 CMake is a powerfull build automation tool that makes compiling code for large projects with a lot of interoperating files a lot easier. Steps 1-3 of the official tutorial are great for understanding the basics. GDB \u00b6 The GNU Project Debugger is the most commonly debugger for the C language family. VSCode also has a degree of integration with GDB that allows an easy to use GUI. This GDB cheat sheet has all the GDB comands you will need to know. Be aware the VSCode has GUI buttons for some of these commands that are easier to use. GoogleTest \u00b6 GoogleTest is the C++ unit testing framework we will be using. The GoogleTest Primer is a good place to start. Example Cached Fibonacci Program Test Cached Fibonacci Program cached_fib.h #include <vector> class CachedFib { public : void CachedFib ( int n ); int getFib ( int n ); private : std :: vector < int > cache ; } cached_fib.cpp #include <iostream> #include <vector> #include \"cached_fib.h\" void CachedFib::CachedFib ( int n ) { cache . push_back ( 0 ); cache . push_back ( 1 ); for ( int i = 2 ; i < n ; i ++ ) { cache . push_back ( cache [ i - 1 ] + cache [ i - 2 ]); } } int CachedFib::getFib ( int n ) { if ( cache . size () < n ) { for ( int i = cache . size (); i < n ; i ++ ) { cache . push_back ( cache [ i -1 ] + cache [ i -2 ]); } } std :: cout << cache [ n - 1 ] << std :: endl ; } test_cached_fib.cpp #include \"cached_fib.h\" #include \"gtest/gtest.h\" CachedFib :: testFib ; class TestFib : public :: testing :: Test { protected : void Setup override { // Every time a test is started, testFib is reinitialized with a constructor parameter of 5 testFib = CachedFib ( 5 ); } } TEST_F ( TestFib , TestBasic ) { ASSERT_EQ ( getFib ( 5 ), 3 ) << \"5th fibonacci number must be 3!\" ; } // more tests Google Protocol Buffer \u00b6 Google Protocol Buffer (Protobuf) is a portable data serialization method. We use it over other methods like JSON and XML because it produces smaller binaries, an important consideration when sending data across an ocean. Unfortunately, there does not seem to be a easy to follow tutorial for using them, but here are the C++ basics . The page is quite dense and can be hard to follow, so do not worry if you do not understand it. Clang \u00b6 In its most basic form, Clang is a compiler for the C language family. Clang has multiple benefits like easier portability compared to, for example, GCC. Clang is actually \"half\" the compiler, the other half being LLVM. Without going into unnecessary detail, Clang compiles C++ code to a generic language before LLVM compiles it to machine specific language. Clangd \u00b6 Clangd is the Clang language server. It provides a much more powerful intellisense than the default one used in VSCode's C/C++ extension. Clang-Tidy \u00b6 Clang-Tidy is a linting tool, who's main purpose is to catch potential programming errors caused by bad programming style/practices using just static analysis. Clang Format \u00b6 An autoformatting tool that makes enforcing style guidelines much easier. When se tup, it corrects formatting as soon as you hit save. llvm-cov \u00b6 We will use llvm-cov to evaluate our test coverage. When used with genhtml , we can generate HTML reports that that show our line, function, and branch coverage line-by-line.","title":"Tools"},{"location":"reference/cpp/tools/#tools","text":"A lot goes into making a well structured C++ project, much more than any one team should have to do.","title":"Tools"},{"location":"reference/cpp/tools/#cmake","text":"CMake is a powerfull build automation tool that makes compiling code for large projects with a lot of interoperating files a lot easier. Steps 1-3 of the official tutorial are great for understanding the basics.","title":"CMake"},{"location":"reference/cpp/tools/#gdb","text":"The GNU Project Debugger is the most commonly debugger for the C language family. VSCode also has a degree of integration with GDB that allows an easy to use GUI. This GDB cheat sheet has all the GDB comands you will need to know. Be aware the VSCode has GUI buttons for some of these commands that are easier to use.","title":"GDB"},{"location":"reference/cpp/tools/#googletest","text":"GoogleTest is the C++ unit testing framework we will be using. The GoogleTest Primer is a good place to start. Example Cached Fibonacci Program Test Cached Fibonacci Program cached_fib.h #include <vector> class CachedFib { public : void CachedFib ( int n ); int getFib ( int n ); private : std :: vector < int > cache ; } cached_fib.cpp #include <iostream> #include <vector> #include \"cached_fib.h\" void CachedFib::CachedFib ( int n ) { cache . push_back ( 0 ); cache . push_back ( 1 ); for ( int i = 2 ; i < n ; i ++ ) { cache . push_back ( cache [ i - 1 ] + cache [ i - 2 ]); } } int CachedFib::getFib ( int n ) { if ( cache . size () < n ) { for ( int i = cache . size (); i < n ; i ++ ) { cache . push_back ( cache [ i -1 ] + cache [ i -2 ]); } } std :: cout << cache [ n - 1 ] << std :: endl ; } test_cached_fib.cpp #include \"cached_fib.h\" #include \"gtest/gtest.h\" CachedFib :: testFib ; class TestFib : public :: testing :: Test { protected : void Setup override { // Every time a test is started, testFib is reinitialized with a constructor parameter of 5 testFib = CachedFib ( 5 ); } } TEST_F ( TestFib , TestBasic ) { ASSERT_EQ ( getFib ( 5 ), 3 ) << \"5th fibonacci number must be 3!\" ; } // more tests","title":"GoogleTest"},{"location":"reference/cpp/tools/#google-protocol-buffer","text":"Google Protocol Buffer (Protobuf) is a portable data serialization method. We use it over other methods like JSON and XML because it produces smaller binaries, an important consideration when sending data across an ocean. Unfortunately, there does not seem to be a easy to follow tutorial for using them, but here are the C++ basics . The page is quite dense and can be hard to follow, so do not worry if you do not understand it.","title":"Google Protocol Buffer"},{"location":"reference/cpp/tools/#clang","text":"In its most basic form, Clang is a compiler for the C language family. Clang has multiple benefits like easier portability compared to, for example, GCC. Clang is actually \"half\" the compiler, the other half being LLVM. Without going into unnecessary detail, Clang compiles C++ code to a generic language before LLVM compiles it to machine specific language.","title":"Clang"},{"location":"reference/cpp/tools/#clangd","text":"Clangd is the Clang language server. It provides a much more powerful intellisense than the default one used in VSCode's C/C++ extension.","title":"Clangd"},{"location":"reference/cpp/tools/#clang-tidy","text":"Clang-Tidy is a linting tool, who's main purpose is to catch potential programming errors caused by bad programming style/practices using just static analysis.","title":"Clang-Tidy"},{"location":"reference/cpp/tools/#clang-format","text":"An autoformatting tool that makes enforcing style guidelines much easier. When se tup, it corrects formatting as soon as you hit save.","title":"Clang Format"},{"location":"reference/cpp/tools/#llvm-cov","text":"We will use llvm-cov to evaluate our test coverage. When used with genhtml , we can generate HTML reports that that show our line, function, and branch coverage line-by-line.","title":"llvm-cov"},{"location":"reference/github/workflow/","text":"Development Workflow Overview \u00b6 graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections. Version control: Git \u00b6 We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git. Remote server: GitHub \u00b6 We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#development-workflow-overview","text":"graph LR B[Problem Conception] --> C{Small Fix?}; C --> |Yes| E[Development]; C --> |No| D[Issue Creation]; D --> E; E --> F[Pull Request]; F --> G{Approved?}; G --> |No| E; G --> |Yes| H[Merge PR into Main]; A good development workflow is essential to maintain a robust codebase and stay organized. The above diagram is a high level overview of how our development process works, and parts of this process are explained in subsequent sections.","title":"Development Workflow Overview"},{"location":"reference/github/workflow/#version-control-git","text":"We use git to help us keep track of the version history of our codebase. Git is a free and open source distributed version control system, and it is commonly used by many developers to keep track of changes to their code over time. As a member of the software team on UBC Sailbot, it is absolutely necessary that you know git. If you are unfamiliar with git, here are a few resources to help you get started: Resource Description Beginners Tutorial A 30 minute video on git for beginners. Good if you want to learn git quickly and nail all the fundamentals. Pro Git book A textbook on using git. Good if you are a completionist and want to deep dive into how git works (and if you have some time on your hands). Common Git Commands A condensed summary of some common git commands. Good to refer to once you are familiar with the fundamentals of git.","title":"Version control: Git"},{"location":"reference/github/workflow/#remote-server-github","text":"We use GitHub as our remote server where we store our codebase. In addition to using it for storage, we also leverage many of GitHub's features to make for a smoother development process. Some examples of features that we use are: Issues Projects Milestones GitHub Organizations Repository Permissions and Branch Protection Rules And more!","title":"Remote server: GitHub"},{"location":"reference/github/workflow/branches/","text":"Developing on Branches \u00b6 We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation . Creating a branch \u00b6 When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main . Branch naming convention \u00b6 When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: user/<github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like user/jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice. Tracking and committing changes \u00b6 All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name> Merging branches \u00b6 There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened. Resolving merge conflicts \u00b6 Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#developing-on-branches","text":"We use branching to work on issues without modifying the main line. This ensures that the main line only contains functional code and handles merge conflicts that arise when multiple people are developing at the same time. For a quick rundown on branching in git, consult the official git documentation .","title":"Developing on Branches"},{"location":"reference/github/workflow/branches/#creating-a-branch","text":"When starting a new issue, you will want to create a new branch for it: Caution When creating branches locally, it uses your local copy to create the new branch. Remember to do a git pull if you intend on using the latest changes from the remote branch you are creating from. Creating a new branch from main # Switch to main git switch main # Update your local copy git pull # Clone a new branch from main git switch -c <branch_name> IMPORTANT: When creating a new branch for an issue, you must create the branch from main .","title":"Creating a branch"},{"location":"reference/github/workflow/branches/#branch-naming-convention","text":"When working on a new issue, you will want to create a branch to work on it. We have the following branch naming convention: user/<github_username>/<issue_number>-<issue_description> Example If Jill (GitHub Username: jill99) is going to take on an issue titled \"Fix bug on pathfinding software\" and the issue number is 39, then the branch named can be named something like user/jill99/39-fix-pathfinding-bug . If the branch that you are creating is not tied to an issue, then you do not need to put an issue number. A descriptive title will suffice.","title":"Branch naming convention"},{"location":"reference/github/workflow/branches/#tracking-and-committing-changes","text":"All files where new changes have been made must first be \"staged\" in order to make commits: git add <FILES> Files that are staged will be part of your next commit. Once you are confident in your changes and you are ready to finalize them, then you should commit your changes: git commit -m \"<commit_message>\" Be sure to add a commit message that is descriptive of the changes that you made. It is encouraged that you make commits often so you can keep track of your changes more easily and avoid overwhelmingly large commits when you look back on your version history. When you are ready to move your local changes to a remote branch, you want to push to the correct branch and potentially set the upstream if it does not yet exist: git push -u origin <current_branch_name>","title":"Tracking and committing changes"},{"location":"reference/github/workflow/branches/#merging-branches","text":"There may be times where you want to merge two branches together, whether you diverged on some ideas and finally want to synthesize them, or you just want to update your issue's branch with the main branch. In any case, merging branches will be inevitable as part of the development process, so it is essential to understand how to merge branches. Merge Local Branch Merge Remote Branch # Checkout to destination branch git checkout <dest_branch> # Merge with local copy of other branch git merge <other_branch> # Checkout to destination branch git checkout <dest_branch> # Fetch from remote git fetch # Merge remote copy of other branch git merge origin/<other_branch> Info Merging a remote branch into its local counterpart using the method above is essentially the same operation as git pull . Once the merge operation is complete, your destination branch should have updates both from itself and the other branch that you merge. If you do a git log , you will also see a new commit that indicates that the merge happened.","title":"Merging branches"},{"location":"reference/github/workflow/branches/#resolving-merge-conflicts","text":"Merging two branches is not always easy since the commit history for both branches could look quite different, and therefore conflicting changes can easily be made. If you run into a scenario like this, you may get something like this: Upon inspecting bar.txt , we see the following: Resolving merge conflicts is not always a trivial task, but there are many ways to resolve them which include: Resolving on GitHub (recommended) Resolving in Command Line Tip If you cannot resolve a merge conflict on your own, reach out to your lead for help!","title":"Resolving merge conflicts"},{"location":"reference/github/workflow/issues/","text":"Creating Issues \u00b6 GitHub issues lets us plan and track our work on GitHub. Getting started with issue templates \u00b6 An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies! Adding issues to a project \u00b6 We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case). Adding issues to a milestone \u00b6 We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository. Labelling issues \u00b6 GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well! Adding assignees \u00b6 Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people. Submit the issue \u00b6 Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#creating-issues","text":"GitHub issues lets us plan and track our work on GitHub.","title":"Creating Issues"},{"location":"reference/github/workflow/issues/#getting-started-with-issue-templates","text":"An issue is associated with a specific repository. To open the issues page for a given repository, click on the issues tab in the repository navigation bar. You will see a list of current issues (if any) for the repository. To create a new issue, click on the New issue button in the upper right corner. When creating a new issue, you will see a few issue templates. Since issues can be created for a variety of reasons, issues may therefore be structured differently and contain different kinds of information. Issue templates were introduced to give us a quick and structured way to writing issues. Note GitHub issues are written using GitHub-flavoured markdown. To add a little spice to your issues, refer to the official GitHub documentation for some quick tips and tricks on how to write awesome markdown! Click on the Get started button to open the issue template. For this example, let's go with the New Feature issue template. Upon opening the issue template, you should see a page like the one below: At this point, you should give a succinct title and describe the issue in the textbox. You will also see some templated sections to fill out. Try to give only the necessary details to make a clear and concise issue. If you are unsure on how to construct your issue, take a look at current or past issues and ask the software leads for further guidance if necessary. Finally, feel free to make suggestions on new templates or changing current templates! Tip We understand that some issues may need extra sections to describe the issue further, or some of the templated sections might not be relevant at all! Add or remove sections as necessary to get your point across. The goal of the issue templates is to provide guidance, not police your documentation methodologies!","title":"Getting started with issue templates"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-project","text":"We use projects to plan and track the status of our issues and pull requests. To add an issue to an existing project, click on the gear icon in the Projects section and add it to your desired project. You will almost always want to add your issue to the Software organization project. To verify that your issue has been added to your desired project, go to the UBC Sailbot organization, go to the Projects tab on the organization banner, and select the project that it is added to. When added to a project, it should show up under the General tab (depending on the project, this might not always be the case).","title":"Adding issues to a project"},{"location":"reference/github/workflow/issues/#adding-issues-to-a-milestone","text":"We use milestones to track progress on groups of issues or pull requests that we want to complete by a certain date. Since our projects span over many years, it is important to work incrementally with small, yet achievable goals. If your issue should belong to a milestone, simply add it to a milestone by clicking on the gear icon in the Milestone section and add it to your desired milestone. Note Unlike projects, milestones are strictly associated with a repository.","title":"Adding issues to a milestone"},{"location":"reference/github/workflow/issues/#labelling-issues","text":"GitHub allows us to label our issues so that we can categorize them. It helps us identify at first glance what kind of a problem that an issue aims to solve and which issues are more important. To add a label to your issue, click on the gear icon in the Labels section and add your desired label(s). The issue templates will already have labels assigned to them, but you should add or remove labels as you see fit to make them as relevant as possible. Note Each repository might have different labels available, so be sure to check out all of the labels at least once in the repository that you are working in. Feel free to suggest additional labels as well!","title":"Labelling issues"},{"location":"reference/github/workflow/issues/#adding-assignees","text":"Every issue should be assigned to at least one person to work on it. If you are not sure who should be assigned the issue initially, then don't worry about it for now since you can assign someone to the issue later on. To assign someone an issue, click on the gear icon in the Assignees section and add the desired people.","title":"Adding assignees"},{"location":"reference/github/workflow/issues/#submit-the-issue","text":"Once you are finished writing your issue, click on the Submit new issue button. You should now see your issue in the issues list and in the UBC Sailbot software project.","title":"Submit the issue"},{"location":"reference/github/workflow/pr/","text":"Pull Requests \u00b6 Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small. Creating a pull request \u00b6 To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards. Merging into main \u00b6 Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge : Reviewing a pull request \u00b6 A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#pull-requests","text":"Pull requests are used to verify code functionality and quality of a development branch before merging into the main branch, accomplished through CI and code reviews. Note Pull requests are much like issues where we can do many of the same things. This goes for creating comments in markdown, assigning reviewers, adding labels, adding projects, or adding milestones. Sometimes we skip writing an issue when the change is relatively small.","title":"Pull Requests"},{"location":"reference/github/workflow/pr/#creating-a-pull-request","text":"To create a pull request in a repository, to go the Pull requests tab and then click New pull request : On the next screen, you need to select the base branch that you are merging into, and the branch that you are comparing. For the most part, the base branch will be the main branch, and the branch that you are comparing will be the issue branch. Once you have decided on your base and compare branches, click on Create pull request . You should see the page below (looking in the dropdown menu, you can open the pull request as a draft to avoid notifying reviewers until you are ready): Notice how this is remarkably similar to the page of an issue. To link a pull request to an issue, simply add <KEYWORD> #<ISSUE NUMBER> to the initial comment in the pull request. A list of valid keywords can be found here . Example \"This issue resolves #49. Please review my pull request!\" Observe that the right-hand side banner contains the following: Field Description Reviewers Assign reviewers to review your pull request. Always try to assign at least one reviewer. Assignees Assign the people who worked on the issue. Labels Assign labels to categorize pull requests. Projects Assign a pull request to a project. Milestone Assign a pull request to a milestone. Attention If you linked the pull request to an issue, you should not add the pull request to a project or a milestone to avoid duplicate cards.","title":"Creating a pull request"},{"location":"reference/github/workflow/pr/#merging-into-main","text":"Once the pull request and code reviews are complete, it is time to merge the changes in the pull request into the main branch! However, this can only be done when the following conditions are met: All CI checks pass (look for a green checkmark beside your latest commit on GitHub). All reviewers have reviewed the PR and approved the PR. There are no unresolved comments and suggestions from the reviewers. There are no merge conflicts with the main branch. If all of these conditions are met, confirm that the merge is good to go by clicking Squash and merge :","title":"Merging into main"},{"location":"reference/github/workflow/pr/#reviewing-a-pull-request","text":"A common activity that you will participate in is reviewing pull requests to give your feedback on other's code. You will be notified when you have been requested to review a pull request and should promptly review it as soon as time permits. In particular, you will most likely be doing the following in a pull request: Asking Questions: Clarify your understanding about something that you are not sure about. Providing Suggestions: Give some ideas about how to improve the current implementation and provide feedback to your peers. This is a good opportunity to share your knowledge with others. Verify Implementations: Identify potential bugs in the implementation and raise your concerns with the person who developed the solution. This will reduce the likelihood of bugs and significantly bring down the number of issues in the future. Documentation: Record why certain changes were made, especially if this diverges from the proposed solution in the linked issue (if any).","title":"Reviewing a pull request"},{"location":"reference/python/","text":"Getting Started \u00b6 We use Python 3 to write the majority of our software at UBC Sailbot. Pathfinding and Controls mainly use Python 3, so it is critical that you are familiar with the language if you are on one of these sub-teams. Python tutorials \u00b6 We understand that not everyone who joins Sailbot has Python in their toolkit, nor do we expect it either! Whether you are learning Python for the first time or you just want to brush up, we have provided some resources below. You will not learn absolutely everything from the resources below, but it is a good starting point. You will mostly learn through doing, as you would with most technical skills! Resource Description The Python Tutorial The official python tutorial. Good if you have some time on your hands and you are a completionist. Sections 1 - 5 and 9 are the most relevant. w3schools Tutorial Good if you want a more brief introduction to Python. It breaks down a lot of concepts into sections. Everything up to Python Classes/Objects is relevant. YouTube Tutorial If you like video tutorials, then we recommend this tutorial. This video is about 5 hours long, but it pretty much covers everything that you'll need to know for Python and there are some hands on projects. Shorter YouTube Tutorial A shorter alternative YouTube tutorial condensed into 1 hour. It covers less material but still covers many of the essentials. CodingBat Practice Good resource to put your Python skills to practice on some simple coding problems. Note that this resource does not teach you python. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"Getting Started"},{"location":"reference/python/#getting-started","text":"We use Python 3 to write the majority of our software at UBC Sailbot. Pathfinding and Controls mainly use Python 3, so it is critical that you are familiar with the language if you are on one of these sub-teams.","title":"Getting Started"},{"location":"reference/python/#python-tutorials","text":"We understand that not everyone who joins Sailbot has Python in their toolkit, nor do we expect it either! Whether you are learning Python for the first time or you just want to brush up, we have provided some resources below. You will not learn absolutely everything from the resources below, but it is a good starting point. You will mostly learn through doing, as you would with most technical skills! Resource Description The Python Tutorial The official python tutorial. Good if you have some time on your hands and you are a completionist. Sections 1 - 5 and 9 are the most relevant. w3schools Tutorial Good if you want a more brief introduction to Python. It breaks down a lot of concepts into sections. Everything up to Python Classes/Objects is relevant. YouTube Tutorial If you like video tutorials, then we recommend this tutorial. This video is about 5 hours long, but it pretty much covers everything that you'll need to know for Python and there are some hands on projects. Shorter YouTube Tutorial A shorter alternative YouTube tutorial condensed into 1 hour. It covers less material but still covers many of the essentials. CodingBat Practice Good resource to put your Python skills to practice on some simple coding problems. Note that this resource does not teach you python. Feel free to add other resources other than the ones listed above if you find any that you like!","title":"Python tutorials"},{"location":"reference/python/conventions/","text":"Conventions \u00b6 At UBC Sailbot, we follow standards in how we code to maintain a clean and comprehensible codebase. This page addresses what conventions we use specifically when programming in Python. Style guide \u00b6 To ensure that the codebase stays clean, we use flake8 , which is a tool for style guide enforcement mostly based off pep8 . To automate most of this process, we use autopep8 , which is a tool that resolves most style issues. However, there will be some issues that must be resolved by you! Refer to this guide on how to write readable code in python with the pep8 style guide. Note Our CI automatically checks that your code follows the pep8 standard. If it does not, your pull requests will be blocked from being merged until those issues are resolved! Documentation \u00b6 Code is written once and read a thousand times, so it is important to provide good documentation for current and future members of the software team. The major things that we document in our code are: Classes and Objects: What does it represent? What is it used for? What are its member variables? What are they used for? Functions: What are the inputs and outputs? What is the overall behavior and purpose of the function? Code: Is a line of code obscure and/or not clear? Add an inline comment to clear things up. Break down a large process. Ideally, the third point should be avoided as much as possible since we would want our code to be self explanatory. It should be done only when absolutely necessary. Generating docstrings \u00b6 We use a vscode extension called autoDocstring which autogenerates docstrings that we use to document our code. To install this extension, go to the Extensions tab in vscode and search autoDocstring in the marketplace. To generate docstrings, type \"\"\" at the beginning of the function that you want to document and the template will be generated for you! Note The autoDocstring extension only works for functions. It does not work for classes and objects, so documenting these will have to be done manually. Be sure to follow the same format used by functions. Example on documentation \u00b6 It's hard to imagine what good documentation looks like. We provide a few examples below of documenting code using the autoDocstring extension. Documentation example on a function def inner_product ( v1 , v2 ): \"\"\" Computes the inner product between two 1D real vectors. Input vectors should have the same dimensions. Args: v1 (List[float]): The first vector of real numbers. v2 (List[float]): The second vector of real numbers. Returns: float : The inner product between v1 and v2 \"\"\" assert ( len ( v1 ) == len ( v2 )), \"Input lists must have same length\" # Iterate through elementwise pairs summation = 0 for e1 , e2 in zip ( v1 , v2 ): summation += ( e1 * e2 ) return float ( summation ) Documentation example with a stack class Stack : \"\"\" This class represents a stack, which is an abstract data type that serves as a collection of elements. The stack is a LIFO datastructure defined by two main operations: Push and Pop. Attributes: __stack (List[Any]): A list containing the elements on the stack. \"\"\" def __init__ ( self ): \"\"\" Initializes the Stack object. \"\"\" self . __stack = [] def push ( self , element ): \"\"\" Pushes an element to the top of the stack. Args: element (Any): The element to be pushed on to the stack. \"\"\" self . __stack . append ( element ) def pop ( self ): \"\"\" Removes the element at the top of the stack and returns it. If the stack is empty, then None is returned. Returns: Any, NoneType: The element at the top of the stack. \"\"\" if self . is_empty (): return None else : return self . __stack . pop () def is_empty ( self ): \"\"\" Determines whether the stack is empty or not. Returns: bool: Returns True if the stack is empty, and False otherwise. \"\"\" empty = ( len ( self . __stack ) == 0 ) return empty def __len__ ( self ): \"\"\" Gets the number of elements on the stack. Returns: int: The number of elements on the stack. \"\"\" length = len ( self . __stack ) return length","title":"Conventions"},{"location":"reference/python/conventions/#conventions","text":"At UBC Sailbot, we follow standards in how we code to maintain a clean and comprehensible codebase. This page addresses what conventions we use specifically when programming in Python.","title":"Conventions"},{"location":"reference/python/conventions/#style-guide","text":"To ensure that the codebase stays clean, we use flake8 , which is a tool for style guide enforcement mostly based off pep8 . To automate most of this process, we use autopep8 , which is a tool that resolves most style issues. However, there will be some issues that must be resolved by you! Refer to this guide on how to write readable code in python with the pep8 style guide. Note Our CI automatically checks that your code follows the pep8 standard. If it does not, your pull requests will be blocked from being merged until those issues are resolved!","title":"Style guide"},{"location":"reference/python/conventions/#documentation","text":"Code is written once and read a thousand times, so it is important to provide good documentation for current and future members of the software team. The major things that we document in our code are: Classes and Objects: What does it represent? What is it used for? What are its member variables? What are they used for? Functions: What are the inputs and outputs? What is the overall behavior and purpose of the function? Code: Is a line of code obscure and/or not clear? Add an inline comment to clear things up. Break down a large process. Ideally, the third point should be avoided as much as possible since we would want our code to be self explanatory. It should be done only when absolutely necessary.","title":"Documentation"},{"location":"reference/python/conventions/#generating-docstrings","text":"We use a vscode extension called autoDocstring which autogenerates docstrings that we use to document our code. To install this extension, go to the Extensions tab in vscode and search autoDocstring in the marketplace. To generate docstrings, type \"\"\" at the beginning of the function that you want to document and the template will be generated for you! Note The autoDocstring extension only works for functions. It does not work for classes and objects, so documenting these will have to be done manually. Be sure to follow the same format used by functions.","title":"Generating docstrings"},{"location":"reference/python/conventions/#example-on-documentation","text":"It's hard to imagine what good documentation looks like. We provide a few examples below of documenting code using the autoDocstring extension. Documentation example on a function def inner_product ( v1 , v2 ): \"\"\" Computes the inner product between two 1D real vectors. Input vectors should have the same dimensions. Args: v1 (List[float]): The first vector of real numbers. v2 (List[float]): The second vector of real numbers. Returns: float : The inner product between v1 and v2 \"\"\" assert ( len ( v1 ) == len ( v2 )), \"Input lists must have same length\" # Iterate through elementwise pairs summation = 0 for e1 , e2 in zip ( v1 , v2 ): summation += ( e1 * e2 ) return float ( summation ) Documentation example with a stack class Stack : \"\"\" This class represents a stack, which is an abstract data type that serves as a collection of elements. The stack is a LIFO datastructure defined by two main operations: Push and Pop. Attributes: __stack (List[Any]): A list containing the elements on the stack. \"\"\" def __init__ ( self ): \"\"\" Initializes the Stack object. \"\"\" self . __stack = [] def push ( self , element ): \"\"\" Pushes an element to the top of the stack. Args: element (Any): The element to be pushed on to the stack. \"\"\" self . __stack . append ( element ) def pop ( self ): \"\"\" Removes the element at the top of the stack and returns it. If the stack is empty, then None is returned. Returns: Any, NoneType: The element at the top of the stack. \"\"\" if self . is_empty (): return None else : return self . __stack . pop () def is_empty ( self ): \"\"\" Determines whether the stack is empty or not. Returns: bool: Returns True if the stack is empty, and False otherwise. \"\"\" empty = ( len ( self . __stack ) == 0 ) return empty def __len__ ( self ): \"\"\" Gets the number of elements on the stack. Returns: int: The number of elements on the stack. \"\"\" length = len ( self . __stack ) return length","title":"Example on documentation"},{"location":"reference/python/virtual-environments/","text":"Virtual Environments \u00b6 The Python virtual environment is a tool for dependency management and project isolation. They solve many common issues, including: Dependency Resolution: A project might want a package with version A while another project might want a package with version B. With a virtual environment, you can separate which packages that you want to use for a given project. Project Isolation: The environment for your project is self-contained and reproducible by capturing all dependencies in a configuration file. Housekeeping: Virtual environments allow you to keep your global workspace tidy. There are two main methods of creating virtual environments: virtualenv and Anaconda . Each have their own benefits and drawbacks. Here are some differences between the two: Virtualenv Anaconda Environment files are local. Environment files are available globally. Must activate environment by giving the path. Can activate the environment without knowing the path. Can only use pip to install packages. Can either use pip or built-in conda package manager. Installation is very simple. Installation takes more effort. Can only install python packages. In addition to packages, you can download many data science tools. We recommend virtualenv over Anaconda because of its simplicity. However, feel free to appeal to your preferences. Installation \u00b6 Virtualenv Anaconda If you already have python and the pip package manager installed, just execute the following: Using pip to install virtualenv pip install virtualenv Go to the official Anaconda website and follow the installation instructions for your operating system. Using virtual environments \u00b6 The name of a virtual environment is configurable. For the purposes of this site, we will use env as the environment name unless specified otherwise. Creating a virtual environment \u00b6 Virtualenv Anaconda Since virtualenv creates the environment directory in a specific location, make sure that you are in the located in the project that you want to work on. Create virtual environment with virtualenv # Go to desired location cd <PATH TO DIRECTORY> # Create the environment with the name env python3 -m venv env Verify that your environment is created by examining your current directory and look for the directory that matches the name of your virtual environment. Since the environment will be available globally, there is no need to go to a specific location to create it. Create virtual environment with Anaconda # Create environment with name env and python version conda env create -n env python = <PYTHON VERSION NUM> If you don't specify a python version, the default is the latest version. Verify that your environment is created by executing conda env list . Activating the virtual environment \u00b6 To use the virtual environment, you must activate it. Virtualenv Anaconda Windows MacOS Linux Activation for Windows env\\Scripts\\activate Activation for MacOS source env/bin/activate Activation for Linux source env/bin/activate Activation for Anaconda conda activate env After activating your virtual environment, you might see (env) on your terminal before or after your current line. Now you are in your virtual environment! Installing dependencies \u00b6 Any dependencies that you install while your virtual environment is activated are only available in your virtual environment. If you deactivate your environment and try to use those dependencies, you will find that you will get errors because they will not be found unless you install those dependencies in the other environment! Virtualenv Anaconda Use the pip package manager to install python dependencies. Install dependency with pip pip install <PACKAGE> Option 1: pip Option 2: conda Use the pip package manager to install python dependencies. Install dependency with pip # Install pip using conda conda install pip # Install python packages using pip pip install <PACKAGE> Use the built-in conda package manager to install python dependencies. Install dependency with conda conda install -c <CHANNEL> <PACKAGE> Sometimes, installing a package like this simply won't work because you are not installing from the correct channel . You usually will have to google the command to use in order to install your package correctly because it usually comes from a specific channel that you don't know about. Some common channels to try are: conda-forge anaconda bioconda r Deactivating the virtual environment \u00b6 When you are finished using your virtual environment, you will need to deactivate it. Virtualenv Anaconda Deactivate virtualenv environment deactivate Deactivate anaconda environment conda deactivate Reproducing your virtual environment \u00b6 When you want to share your code with others, it is important for others to be able to reproduce the environment that you worked in. We discuss two topics in this section: exporting your environment and reproducing the environment. Exporting your virtual environment \u00b6 In order to reproduce your virtual environment, you need to export some information about your environment. Be sure to follow the instructions below while your environment is activated . Virtualenv Anaconda You will create a requirements.txt file, which essentially lists all of your python dependencies in one file: Creating requirements file pip freeze > requirements.txt The pip freeze command prints all of your pip dependencies, and > requirements.txt redirects the output to a text file. Anaconda uses configuration files to recreate an environment. Windows MacOS Linux Execute the following command to create a file called environment.yml : Create config file conda env export > environment.yml Then, open the environment.yml file and delete the line with prefix: . Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Reproducing the environment \u00b6 You can reproduce your virtual environment when given the information about it. The steps above tell you how to extract the information, and now we will use that information to recreate the virtual environment. Remember to deactivate the current environment before making a new environment. Virtualenv Anaconda We use the requirements.txt file that we generated earlier to recreate the environment. Recreate virtualenv environment # Create the new environment python -m venv <NEW ENV NAME> # Activate the environment source <NEW ENV NAME>/bin/activate # Install dependencies pip install -r <PATH TO requirements.txt file> We use the environment.yml file that we generated earlier to recreate the environment. Recreate the conda environment # Create the new environment with the dependencies conda env create -f <PATH TO environment.yml> -n <ENV NAME> Official references \u00b6 In this section, we summarized what virtual environments are, why they are used, and how to use them. We did not cover all of the functions of virtual environments, but feel free to consult the official references to learn about virtual environments more in depth. Virtualenv Reference Anaconda Reference","title":"Virtual Environments"},{"location":"reference/python/virtual-environments/#virtual-environments","text":"The Python virtual environment is a tool for dependency management and project isolation. They solve many common issues, including: Dependency Resolution: A project might want a package with version A while another project might want a package with version B. With a virtual environment, you can separate which packages that you want to use for a given project. Project Isolation: The environment for your project is self-contained and reproducible by capturing all dependencies in a configuration file. Housekeeping: Virtual environments allow you to keep your global workspace tidy. There are two main methods of creating virtual environments: virtualenv and Anaconda . Each have their own benefits and drawbacks. Here are some differences between the two: Virtualenv Anaconda Environment files are local. Environment files are available globally. Must activate environment by giving the path. Can activate the environment without knowing the path. Can only use pip to install packages. Can either use pip or built-in conda package manager. Installation is very simple. Installation takes more effort. Can only install python packages. In addition to packages, you can download many data science tools. We recommend virtualenv over Anaconda because of its simplicity. However, feel free to appeal to your preferences.","title":"Virtual Environments"},{"location":"reference/python/virtual-environments/#installation","text":"Virtualenv Anaconda If you already have python and the pip package manager installed, just execute the following: Using pip to install virtualenv pip install virtualenv Go to the official Anaconda website and follow the installation instructions for your operating system.","title":"Installation"},{"location":"reference/python/virtual-environments/#using-virtual-environments","text":"The name of a virtual environment is configurable. For the purposes of this site, we will use env as the environment name unless specified otherwise.","title":"Using virtual environments"},{"location":"reference/python/virtual-environments/#creating-a-virtual-environment","text":"Virtualenv Anaconda Since virtualenv creates the environment directory in a specific location, make sure that you are in the located in the project that you want to work on. Create virtual environment with virtualenv # Go to desired location cd <PATH TO DIRECTORY> # Create the environment with the name env python3 -m venv env Verify that your environment is created by examining your current directory and look for the directory that matches the name of your virtual environment. Since the environment will be available globally, there is no need to go to a specific location to create it. Create virtual environment with Anaconda # Create environment with name env and python version conda env create -n env python = <PYTHON VERSION NUM> If you don't specify a python version, the default is the latest version. Verify that your environment is created by executing conda env list .","title":"Creating a virtual environment"},{"location":"reference/python/virtual-environments/#activating-the-virtual-environment","text":"To use the virtual environment, you must activate it. Virtualenv Anaconda Windows MacOS Linux Activation for Windows env\\Scripts\\activate Activation for MacOS source env/bin/activate Activation for Linux source env/bin/activate Activation for Anaconda conda activate env After activating your virtual environment, you might see (env) on your terminal before or after your current line. Now you are in your virtual environment!","title":"Activating the virtual environment"},{"location":"reference/python/virtual-environments/#installing-dependencies","text":"Any dependencies that you install while your virtual environment is activated are only available in your virtual environment. If you deactivate your environment and try to use those dependencies, you will find that you will get errors because they will not be found unless you install those dependencies in the other environment! Virtualenv Anaconda Use the pip package manager to install python dependencies. Install dependency with pip pip install <PACKAGE> Option 1: pip Option 2: conda Use the pip package manager to install python dependencies. Install dependency with pip # Install pip using conda conda install pip # Install python packages using pip pip install <PACKAGE> Use the built-in conda package manager to install python dependencies. Install dependency with conda conda install -c <CHANNEL> <PACKAGE> Sometimes, installing a package like this simply won't work because you are not installing from the correct channel . You usually will have to google the command to use in order to install your package correctly because it usually comes from a specific channel that you don't know about. Some common channels to try are: conda-forge anaconda bioconda r","title":"Installing dependencies"},{"location":"reference/python/virtual-environments/#deactivating-the-virtual-environment","text":"When you are finished using your virtual environment, you will need to deactivate it. Virtualenv Anaconda Deactivate virtualenv environment deactivate Deactivate anaconda environment conda deactivate","title":"Deactivating the virtual environment"},{"location":"reference/python/virtual-environments/#reproducing-your-virtual-environment","text":"When you want to share your code with others, it is important for others to be able to reproduce the environment that you worked in. We discuss two topics in this section: exporting your environment and reproducing the environment.","title":"Reproducing your virtual environment"},{"location":"reference/python/virtual-environments/#exporting-your-virtual-environment","text":"In order to reproduce your virtual environment, you need to export some information about your environment. Be sure to follow the instructions below while your environment is activated . Virtualenv Anaconda You will create a requirements.txt file, which essentially lists all of your python dependencies in one file: Creating requirements file pip freeze > requirements.txt The pip freeze command prints all of your pip dependencies, and > requirements.txt redirects the output to a text file. Anaconda uses configuration files to recreate an environment. Windows MacOS Linux Execute the following command to create a file called environment.yml : Create config file conda env export > environment.yml Then, open the environment.yml file and delete the line with prefix: . Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml Execute the following command to create a file called environment.yml : Create config file conda env export | grep -v \"^prefix: \" > environment.yml","title":"Exporting your virtual environment"},{"location":"reference/python/virtual-environments/#reproducing-the-environment","text":"You can reproduce your virtual environment when given the information about it. The steps above tell you how to extract the information, and now we will use that information to recreate the virtual environment. Remember to deactivate the current environment before making a new environment. Virtualenv Anaconda We use the requirements.txt file that we generated earlier to recreate the environment. Recreate virtualenv environment # Create the new environment python -m venv <NEW ENV NAME> # Activate the environment source <NEW ENV NAME>/bin/activate # Install dependencies pip install -r <PATH TO requirements.txt file> We use the environment.yml file that we generated earlier to recreate the environment. Recreate the conda environment # Create the new environment with the dependencies conda env create -f <PATH TO environment.yml> -n <ENV NAME>","title":"Reproducing the environment"},{"location":"reference/python/virtual-environments/#official-references","text":"In this section, we summarized what virtual environments are, why they are used, and how to use them. We did not cover all of the functions of virtual environments, but feel free to consult the official references to learn about virtual environments more in depth. Virtualenv Reference Anaconda Reference","title":"Official references"},{"location":"reference/sailing/","text":"Sailing Knowledge Section Overview \u00b6 In order to make high-quality contributions to Sailbot's Software teams, it is extremely helpful to have some understanding of sailing. This section introduces important parts of a sailboat, explains the 4 types of turns, discusses upwind and downwind sailing, and covers some other helpful knowledge. In this section, terms which are Bolded and Italicized are the most important terms to know. These terms are listed at the bottom of each page. Terms that are only Italicized are other helpful sailing terms. Words that are bolded are meant to be emphasized, but are not necessarily considered important vocabulary.","title":"Sailing Knowledge Section Overview"},{"location":"reference/sailing/#sailing-knowledge-section-overview","text":"In order to make high-quality contributions to Sailbot's Software teams, it is extremely helpful to have some understanding of sailing. This section introduces important parts of a sailboat, explains the 4 types of turns, discusses upwind and downwind sailing, and covers some other helpful knowledge. In this section, terms which are Bolded and Italicized are the most important terms to know. These terms are listed at the bottom of each page. Terms that are only Italicized are other helpful sailing terms. Words that are bolded are meant to be emphasized, but are not necessarily considered important vocabulary.","title":"Sailing Knowledge Section Overview"},{"location":"reference/sailing/boat_parts/","text":"Parts of a Sailboat \u00b6 This page names some important parts of a sailboat, and explains what the part is for. Read the descriptions of the parts below, and refer to the image to see where the part fits in. Hull \u00b6 The Hull is the \"boat\" part of the boat, which displaces water to create buoyancy. The following parts of the boat are attached to the hull: Keel : The keel has a large mass on the end, which keeps the sailboat upright. The fin-like shape of the keel provides lateral resistance to prevent the boat from slipping sideways through the water. Rudder : Raye has two rudders for redundancy. The rudders can angle side to side to steer the boat. To steer the boat effectively, the rudders need enough water flowing over them to create a pressure difference when they angle sideways. Controls sends commands to the rudder to steer the boat. It is also helpful to know the names of the following \"regions\" of the hull: Bow : The front of the boat. Stern : The back of the boat. Aft means \"backwards towards the stern\". Starboard : The side of the boat which is on the right , for someone standing on the boat facing the bow. Port : The side of the boat which is on the left , for someone standing on the boat facing the bow. To remember which is which between starboard and port, remember that \"port\" and \"left\" both have 4 letters. The image below shows a birds-eye view of the outline of a hull of a sailboat, where the \"regions\" of the hull are labeled. Jib \u00b6 The Jib is the sail located near the bow, and is the smaller of the two sails. Jib Sheet : In general, sheets are ropes that pull a sail in to the boat, and the jib sheet does this for the jib. On Raye, the jib sheet connects to the back bottom corner of the jib, through a pulley near the bottom of the mast to the Jib Winch. Most sailboats have two jib sheets, one on either side, but Raye is designed differently for autonomy. The Jib Winch is a motor-driven device that tightens or pulls in the jib by pulling on the jib sheet. Controls sends commands to the winches. The jib halyard : In general, a halyard is a rope that pulls a sail up. The jib halyard pulls up the jib. It connects to the top of the jib, runs through a pulley near the top of the mast, and is tied off near the bottom of the mast. Mast \u00b6 The Mast is the long vertical pole which connects to hull. It holds up the sails and some instruments. The following instruments are at the top of the mast: One of the 3 Wind Sensors . The top of the mast is a good location to measure undisturbed wind. Pathfinding and Controls both use data from the wind sensors. The AIS antenna . AIS (\"Autonomous Identification System\") is a system by which ships communicate their location, speed, and other information to surrounding ships via radio signals. Pathfinding uses AIS data to avoid other ships. The mast is held upright by three lines: The forestay connects the mast from the top of the jib to the bow, and runs parallel to the front edge of the jib. The two shrouds connect the mast from the top of the jib to the outside edges of the hull slightly aft of the mast. There is one shroud on the startboard side and one on the port side. Main Sail \u00b6 The Main Sail is the larger of the two sails, and is located aft of the mast. Most of the boat's propulsion comes from the main sail. The Boom is the horizontal pole that holds the bottom corner of the main sail out from the mast. Main Sheet is the rope that pulls the main sail in towards the center of the boat. It connects from the back end of the boom, through a pulley on the stern, to the Main Winch. The Main Winch is a motor-driven device that pulls in the main sail by pulling on the main sheet. Controls sends commands to the main winch. The main halyard is the line used to hoist the main sail. Conclusion \u00b6 Hopefully this section helped you gain familiarity with some common sailing terms. It likely feels like this section contains a lot of new information. It's unrealistic to remember it all perfectly, but make an effort to remember the terms which are Bolded and Italicized . Keywords on this Page \u00b6 Hull Keel Rudder Bow Stern Starboard Port Jib Jib winch Mast Wind Sensor AIS Antenna Main Sail Main Winch","title":"Parts of a Sailboat"},{"location":"reference/sailing/boat_parts/#parts-of-a-sailboat","text":"This page names some important parts of a sailboat, and explains what the part is for. Read the descriptions of the parts below, and refer to the image to see where the part fits in.","title":"Parts of a Sailboat"},{"location":"reference/sailing/boat_parts/#hull","text":"The Hull is the \"boat\" part of the boat, which displaces water to create buoyancy. The following parts of the boat are attached to the hull: Keel : The keel has a large mass on the end, which keeps the sailboat upright. The fin-like shape of the keel provides lateral resistance to prevent the boat from slipping sideways through the water. Rudder : Raye has two rudders for redundancy. The rudders can angle side to side to steer the boat. To steer the boat effectively, the rudders need enough water flowing over them to create a pressure difference when they angle sideways. Controls sends commands to the rudder to steer the boat. It is also helpful to know the names of the following \"regions\" of the hull: Bow : The front of the boat. Stern : The back of the boat. Aft means \"backwards towards the stern\". Starboard : The side of the boat which is on the right , for someone standing on the boat facing the bow. Port : The side of the boat which is on the left , for someone standing on the boat facing the bow. To remember which is which between starboard and port, remember that \"port\" and \"left\" both have 4 letters. The image below shows a birds-eye view of the outline of a hull of a sailboat, where the \"regions\" of the hull are labeled.","title":"Hull"},{"location":"reference/sailing/boat_parts/#jib","text":"The Jib is the sail located near the bow, and is the smaller of the two sails. Jib Sheet : In general, sheets are ropes that pull a sail in to the boat, and the jib sheet does this for the jib. On Raye, the jib sheet connects to the back bottom corner of the jib, through a pulley near the bottom of the mast to the Jib Winch. Most sailboats have two jib sheets, one on either side, but Raye is designed differently for autonomy. The Jib Winch is a motor-driven device that tightens or pulls in the jib by pulling on the jib sheet. Controls sends commands to the winches. The jib halyard : In general, a halyard is a rope that pulls a sail up. The jib halyard pulls up the jib. It connects to the top of the jib, runs through a pulley near the top of the mast, and is tied off near the bottom of the mast.","title":"Jib"},{"location":"reference/sailing/boat_parts/#mast","text":"The Mast is the long vertical pole which connects to hull. It holds up the sails and some instruments. The following instruments are at the top of the mast: One of the 3 Wind Sensors . The top of the mast is a good location to measure undisturbed wind. Pathfinding and Controls both use data from the wind sensors. The AIS antenna . AIS (\"Autonomous Identification System\") is a system by which ships communicate their location, speed, and other information to surrounding ships via radio signals. Pathfinding uses AIS data to avoid other ships. The mast is held upright by three lines: The forestay connects the mast from the top of the jib to the bow, and runs parallel to the front edge of the jib. The two shrouds connect the mast from the top of the jib to the outside edges of the hull slightly aft of the mast. There is one shroud on the startboard side and one on the port side.","title":"Mast"},{"location":"reference/sailing/boat_parts/#main-sail","text":"The Main Sail is the larger of the two sails, and is located aft of the mast. Most of the boat's propulsion comes from the main sail. The Boom is the horizontal pole that holds the bottom corner of the main sail out from the mast. Main Sheet is the rope that pulls the main sail in towards the center of the boat. It connects from the back end of the boom, through a pulley on the stern, to the Main Winch. The Main Winch is a motor-driven device that pulls in the main sail by pulling on the main sheet. Controls sends commands to the main winch. The main halyard is the line used to hoist the main sail.","title":"Main Sail"},{"location":"reference/sailing/boat_parts/#conclusion","text":"Hopefully this section helped you gain familiarity with some common sailing terms. It likely feels like this section contains a lot of new information. It's unrealistic to remember it all perfectly, but make an effort to remember the terms which are Bolded and Italicized .","title":"Conclusion"},{"location":"reference/sailing/boat_parts/#keywords-on-this-page","text":"Hull Keel Rudder Bow Stern Starboard Port Jib Jib winch Mast Wind Sensor AIS Antenna Main Sail Main Winch","title":"Keywords on this Page"},{"location":"reference/sailing/miscellaneous/","text":"Miscellaneous Sailing Knowledge \u00b6 This section covers some other useful information. Wind Direction Convention \u00b6 Generally speaking, there are two ways to use an angle to describe the wind direction. The angle tells you which way the wind is blowing towards . For example, 0\u00b0 means the wind is blowing from North to South. The angle tells you which way the wind is coming from . For example, 0\u00b0 means the wind is blowing from South to North. In sailing, we normally talk about \"where the wind is coming from \". Somehow this ends up being more intuitive when talking about maneuvers or sail angle adjustments. However, when describing the wind as a vector, it can make more sense for the vector to represent the actual speed and direction the air is flowing. Make sure to document which convention you are using in your work when its applicable, and don't be afraid to ask someone to clarify which convention they are using in their work. Navigation Terms \u00b6 Heading \u00b6 In navigation generally (outside of Sailbot), the Heading is the direction the bow of the boat is pointing towards. Headings are typically (but not always at Sailbot) measured relative to true North in the clockwise direction. Bearing \u00b6 A Bearing is used to describe one point in relation to another: the Bearing of point \"A\" from point \"B\" is the direction you would would look towards if you wanted to see point \"A\" while standing at point \"B\". A Range is the distance between points \"A\" and \"B\", so that a Bearing and Range together can locate point \"A\" relative to point \"B\" in polar co-ordinates. There are two main ways of measuring bearings: A True Bearing is a bearing where the angle convention is as follows: 0\u00b0 is towards the North , angles increase in the clockwise direction, and angles are typically bounded within [0\u00b0, 360\u00b0)] A Relative Bearing is a bearing where the angle convention is as follows: 0\u00b0 is straight forwards relative to the boat , and angle measurements increase in the clockwise direction. Angles may be bounded in [-180\u00b0, 180\u00b0) or [0\u00b0, 360\u00b0) In the example below, the boat \"B\" has a Heading (H) of 30\u00b0. The True Bearing ( \\(B_t\\) ) of the Lighthouse \"A\" from the boat is 90\u00b0. The Relative Bearing ( \\(B_r\\) ) of the lighthouse from the boat is 60\u00b0. Track Made Good \u00b6 Boats do not necessarily travel in the same direction as their Heading , due to the effects of ocean current and wind. The direction that the boat moves in relative to the sea floor is called the Track Made Good . This is the same as if you measured motion compared to land or with a GPS. Heading and Bearing in Raye Project \u00b6 In Sailbot's Raye project, Heading and Bearing are used to refer to different conventions for describing which way the boat is pointing. The following 3 pieces of information are needed to unambiguously define an angle measuring convention: What does 0\u00b0 mean? If 0\u00b0 is North, is it towards the North or away from the North? Do the angle measurements increase in the clockwise or counter-clockwise direction? What range should the angles be bounded to? This part is often unimportant if the angles are only used in trigonometry functions. Some common examples of angle measuring conventions which we use are: 0\u00b0 means towards the East, angles increase in the counter-clockwise direction, and angles are bounded in [-180\u00b0, 180\u00b0). This is effectively the main angle convention used in most math courses. 0\u00b0 means towards the North, angles increase in the clockwise direction, and angles are bounded in [0\u00b0, 360\u00b0). This angle convention is more commonly used by navigators. The specific angle conventions which we call Heading and Bearing can be ambiguous, and may be subject to change, so they are deliberately omitted here. Refer to the applicable source code to determine what the angle conventions are. True, Apparent, and Boat Wind \u00b6 True Wind is the wind vector (speed and direction) which you would measure while standing on land (or motionless at sea with unchanging GPS co-ordinates). In sailbot code, this may be referred to as Global Wind . When people refer to \"the wind\", they normally mean True Wind. Boat Wind is the wind vector which you would measure while standing on a moving boat when the True Wind speed is 0. This means that boat wind always blows straight onto the bow of the boat, and the magnitude of the boat wind is equal to the speed of the boat. Apparent Wind is the vector sum of the True Wind and the Boat Wind. This is the wind that you would measure while standing on a moving boat more generally, even if there is non-zero wind. The apparent wind is also what our wind sensors measure, and what our sails feel. In Sailbot code, Apparent Wind may be referred to as Measured Wind . In the example below, suppose the wind is blowing from the North at 4 m/s, and suppose the boat is moving towards the East at 3 m/s. The True Wind everywhere is blowing at 4 m/s from the North The Boat Wind onboard the boat is blowing from the East at 3 m/s The Apparent Wind onboard the boat is has a magnitude of \\(\\sqrt{3^2 + 4^2} = 5 \\text{ m/s}\\) , and is coming from a true bearing of \\(\\arctan{(\\frac{3}{4})} = 36.9\u00b0\\) . Tack \u00b6 In the Types of Turn page, we discussed how a Tack is a type of turn. Weirdly, the word \"tack\" actually has two more distinct meanings in sailing. The word \"Tack\" can refer to: the type of turn, as covered before. Starboard Tack vs Port Tack : The tack is basically the side of the boat which is further upwind. More thoroughly, the tack is the opposite side to the sail. This means that boats change tack when the sail switches sides. In the diagram below, the 3 boats on the left of the diagram are on Starboard Tack, and the 3 boats on the right side are on Port Tack. The tack of a boat in Irons is undefined. The boat in the diagram on a run is on Port Tack. If the boat continued straight but the sail switched sides into the position shown by the dashed line, the boat would be on Starboard Tack. Finally, the Tack can refer to particular region of the main sail. This is not important for software members. Keywords on this Page \u00b6 Heading Bearing Track Made Good Global Wind (aka True Wind) Measured Wind (aka Apparent Wind) Tack","title":"Miscellaneous"},{"location":"reference/sailing/miscellaneous/#miscellaneous-sailing-knowledge","text":"This section covers some other useful information.","title":"Miscellaneous Sailing Knowledge"},{"location":"reference/sailing/miscellaneous/#wind-direction-convention","text":"Generally speaking, there are two ways to use an angle to describe the wind direction. The angle tells you which way the wind is blowing towards . For example, 0\u00b0 means the wind is blowing from North to South. The angle tells you which way the wind is coming from . For example, 0\u00b0 means the wind is blowing from South to North. In sailing, we normally talk about \"where the wind is coming from \". Somehow this ends up being more intuitive when talking about maneuvers or sail angle adjustments. However, when describing the wind as a vector, it can make more sense for the vector to represent the actual speed and direction the air is flowing. Make sure to document which convention you are using in your work when its applicable, and don't be afraid to ask someone to clarify which convention they are using in their work.","title":"Wind Direction Convention"},{"location":"reference/sailing/miscellaneous/#navigation-terms","text":"","title":"Navigation Terms"},{"location":"reference/sailing/miscellaneous/#heading","text":"In navigation generally (outside of Sailbot), the Heading is the direction the bow of the boat is pointing towards. Headings are typically (but not always at Sailbot) measured relative to true North in the clockwise direction.","title":"Heading"},{"location":"reference/sailing/miscellaneous/#bearing","text":"A Bearing is used to describe one point in relation to another: the Bearing of point \"A\" from point \"B\" is the direction you would would look towards if you wanted to see point \"A\" while standing at point \"B\". A Range is the distance between points \"A\" and \"B\", so that a Bearing and Range together can locate point \"A\" relative to point \"B\" in polar co-ordinates. There are two main ways of measuring bearings: A True Bearing is a bearing where the angle convention is as follows: 0\u00b0 is towards the North , angles increase in the clockwise direction, and angles are typically bounded within [0\u00b0, 360\u00b0)] A Relative Bearing is a bearing where the angle convention is as follows: 0\u00b0 is straight forwards relative to the boat , and angle measurements increase in the clockwise direction. Angles may be bounded in [-180\u00b0, 180\u00b0) or [0\u00b0, 360\u00b0) In the example below, the boat \"B\" has a Heading (H) of 30\u00b0. The True Bearing ( \\(B_t\\) ) of the Lighthouse \"A\" from the boat is 90\u00b0. The Relative Bearing ( \\(B_r\\) ) of the lighthouse from the boat is 60\u00b0.","title":"Bearing"},{"location":"reference/sailing/miscellaneous/#track-made-good","text":"Boats do not necessarily travel in the same direction as their Heading , due to the effects of ocean current and wind. The direction that the boat moves in relative to the sea floor is called the Track Made Good . This is the same as if you measured motion compared to land or with a GPS.","title":"Track Made Good"},{"location":"reference/sailing/miscellaneous/#heading-and-bearing-in-raye-project","text":"In Sailbot's Raye project, Heading and Bearing are used to refer to different conventions for describing which way the boat is pointing. The following 3 pieces of information are needed to unambiguously define an angle measuring convention: What does 0\u00b0 mean? If 0\u00b0 is North, is it towards the North or away from the North? Do the angle measurements increase in the clockwise or counter-clockwise direction? What range should the angles be bounded to? This part is often unimportant if the angles are only used in trigonometry functions. Some common examples of angle measuring conventions which we use are: 0\u00b0 means towards the East, angles increase in the counter-clockwise direction, and angles are bounded in [-180\u00b0, 180\u00b0). This is effectively the main angle convention used in most math courses. 0\u00b0 means towards the North, angles increase in the clockwise direction, and angles are bounded in [0\u00b0, 360\u00b0). This angle convention is more commonly used by navigators. The specific angle conventions which we call Heading and Bearing can be ambiguous, and may be subject to change, so they are deliberately omitted here. Refer to the applicable source code to determine what the angle conventions are.","title":"Heading and Bearing in Raye Project"},{"location":"reference/sailing/miscellaneous/#true-apparent-and-boat-wind","text":"True Wind is the wind vector (speed and direction) which you would measure while standing on land (or motionless at sea with unchanging GPS co-ordinates). In sailbot code, this may be referred to as Global Wind . When people refer to \"the wind\", they normally mean True Wind. Boat Wind is the wind vector which you would measure while standing on a moving boat when the True Wind speed is 0. This means that boat wind always blows straight onto the bow of the boat, and the magnitude of the boat wind is equal to the speed of the boat. Apparent Wind is the vector sum of the True Wind and the Boat Wind. This is the wind that you would measure while standing on a moving boat more generally, even if there is non-zero wind. The apparent wind is also what our wind sensors measure, and what our sails feel. In Sailbot code, Apparent Wind may be referred to as Measured Wind . In the example below, suppose the wind is blowing from the North at 4 m/s, and suppose the boat is moving towards the East at 3 m/s. The True Wind everywhere is blowing at 4 m/s from the North The Boat Wind onboard the boat is blowing from the East at 3 m/s The Apparent Wind onboard the boat is has a magnitude of \\(\\sqrt{3^2 + 4^2} = 5 \\text{ m/s}\\) , and is coming from a true bearing of \\(\\arctan{(\\frac{3}{4})} = 36.9\u00b0\\) .","title":"True, Apparent, and Boat Wind"},{"location":"reference/sailing/miscellaneous/#tack","text":"In the Types of Turn page, we discussed how a Tack is a type of turn. Weirdly, the word \"tack\" actually has two more distinct meanings in sailing. The word \"Tack\" can refer to: the type of turn, as covered before. Starboard Tack vs Port Tack : The tack is basically the side of the boat which is further upwind. More thoroughly, the tack is the opposite side to the sail. This means that boats change tack when the sail switches sides. In the diagram below, the 3 boats on the left of the diagram are on Starboard Tack, and the 3 boats on the right side are on Port Tack. The tack of a boat in Irons is undefined. The boat in the diagram on a run is on Port Tack. If the boat continued straight but the sail switched sides into the position shown by the dashed line, the boat would be on Starboard Tack. Finally, the Tack can refer to particular region of the main sail. This is not important for software members.","title":"Tack"},{"location":"reference/sailing/miscellaneous/#keywords-on-this-page","text":"Heading Bearing Track Made Good Global Wind (aka True Wind) Measured Wind (aka Apparent Wind) Tack","title":"Keywords on this Page"},{"location":"reference/sailing/points_of_sail/","text":"Points of Sail \u00b6 In sailing, we sometimes talk about different angles that we can sail on with respect to the wind. Ranges of angles which are close together have special names. These ranges are called points of sail . The discussion below coveres the most important points of sail for software members to understand. Notice how for higher points of sail (points of sail closer to straight into the wind), the sail is pulled tightly in to the boat. If the boat is on a lower point of sail, the sails should be let further out of the boat. For any point of sail, there is an optimum angle that the sail should be adjusted to. If the sails are adjusted too far in or too far out, the boat will not go as fast as it could if the sails were adjusted correctly. Irons \u00b6 The range of angles where the boat is roughly pointing straight into the wind are called Irons , or the No-Go Zone . If the boat is pointing in these directions, the sails will be flapping regardless of how the sheets are adjusted. When the sails are flapping, they are not catching the wind in a way that can propell the boat forwards. When the boat looses propulsion, water stops flowing over the rudder, and the boat loses steering. This is why we want our sailbots to avoid being stuck in irons. Upwind Sailing \u00b6 If we want to sail to a destination that is not on too high or low of an angle upwind or downwind from our starting position, we can just point our boat in that direction, adjust our sails, and go there. However, sometimes we want to sail to a destination that is straight upwind of our starting position. To get there, we will need to do upwind sailing. Since we can't point our boat directly into the wind, we need to sail on an angle on the edge of irons. We will need to tack back and forth every now and then if we want to go directly upwind. The point of sail on the edge of Irons is called Close Hauled . Downwind Sailing \u00b6 Raye also avoids sailing straight downwind. This means that to reach a goal downwind of the starting position, we need to gybe back and forth in a zig-zag pattern. The point of sail straight downwind is called a run , and the next point of sail higher than a run is called a broad reach . Keywords on this Page \u00b6 Irons (aka No-Go Zone) Upwind Sailing Close Hauled Downwind Sailing","title":"Points of Sail"},{"location":"reference/sailing/points_of_sail/#points-of-sail","text":"In sailing, we sometimes talk about different angles that we can sail on with respect to the wind. Ranges of angles which are close together have special names. These ranges are called points of sail . The discussion below coveres the most important points of sail for software members to understand. Notice how for higher points of sail (points of sail closer to straight into the wind), the sail is pulled tightly in to the boat. If the boat is on a lower point of sail, the sails should be let further out of the boat. For any point of sail, there is an optimum angle that the sail should be adjusted to. If the sails are adjusted too far in or too far out, the boat will not go as fast as it could if the sails were adjusted correctly.","title":"Points of Sail"},{"location":"reference/sailing/points_of_sail/#irons","text":"The range of angles where the boat is roughly pointing straight into the wind are called Irons , or the No-Go Zone . If the boat is pointing in these directions, the sails will be flapping regardless of how the sheets are adjusted. When the sails are flapping, they are not catching the wind in a way that can propell the boat forwards. When the boat looses propulsion, water stops flowing over the rudder, and the boat loses steering. This is why we want our sailbots to avoid being stuck in irons.","title":"Irons"},{"location":"reference/sailing/points_of_sail/#upwind-sailing","text":"If we want to sail to a destination that is not on too high or low of an angle upwind or downwind from our starting position, we can just point our boat in that direction, adjust our sails, and go there. However, sometimes we want to sail to a destination that is straight upwind of our starting position. To get there, we will need to do upwind sailing. Since we can't point our boat directly into the wind, we need to sail on an angle on the edge of irons. We will need to tack back and forth every now and then if we want to go directly upwind. The point of sail on the edge of Irons is called Close Hauled .","title":"Upwind Sailing"},{"location":"reference/sailing/points_of_sail/#downwind-sailing","text":"Raye also avoids sailing straight downwind. This means that to reach a goal downwind of the starting position, we need to gybe back and forth in a zig-zag pattern. The point of sail straight downwind is called a run , and the next point of sail higher than a run is called a broad reach .","title":"Downwind Sailing"},{"location":"reference/sailing/points_of_sail/#keywords-on-this-page","text":"Irons (aka No-Go Zone) Upwind Sailing Close Hauled Downwind Sailing","title":"Keywords on this Page"},{"location":"reference/sailing/turning/","text":"Types of Turns \u00b6 In sailing, there are 4 distinct types of turns. Read the descriptions below, and observe how they fit into the diagrams. Note that any of these types of turn can be done in either the clockwise or counter-clockwise directions. Classifying Types Of Turns Summary \u00b6 The following flowchart summarizes how to distinguish between different types of turns. Note: to point higher means to steer your boat to point in a direction closer to straight into the wind to point lower means to steer your boat to point in a direction closer towards to straight downwind graph LR B[Classify a Turn] --> C{Does the sail change<br/>sides during the turn?}; C --> |Yes| E{Which end of<br/>the boat is upwind<br/>during the turn?}; C --> |No| D{Does the<br/>boat point higher<br/>or lower at the end<br/>of the turn?}; D --> |Higher| F[Heading Up]; D --> |Lower| G[Bearing Off]; E --> |Bow| H[Tack]; E --> |Stern| I[Gybe]; The diagrams in this section show outlines of the hull of a boat and its main sail going through turns. As is common in these types of diagrams, assume that the wind is blowing down from the top of the screen unless there is an arrow that indicates otherwise. Heading Up \u00b6 When the boat makes any turn as follows, it is called Heading Up : At the end of the turn, the boat is pointing higher . Throughout the turn, the sails stay on the same side of the boat. In other words, the sails do not cross between the starboard and port sides. Unlike some of the other turns listed here, heading up can be a large turn or a small course adjustment of just a few degrees. The image below shows a boat heading up. Notice how the sail stays on the starboard side of the boat. Bearing Off \u00b6 When the boat makes any turn as follows, it is called Bearing Off : At the end of the turn, the boat is pointing lower . Throughout the turn, the sails stays on the same side of the boat (port or starboard). Like heading up, bearing off can be a small course adjustment. Tacking \u00b6 When the boat makes any turn as follows, it is called a Tack or Tacking : The sails change sides. Through the turn, the wind hits the bow of the boat before the stern. You can also say that the bow is upwind or windward of the stern. Notice how at some point throughout this turn, the boat will be pointing straight into the wind. While the boat points nearly straight into the wind, the sails don't generate any forward propulsion. This means that a tack must be a large (at least ~90\u00b0) turn all at once, so that the boat's momentum carries it through the range of angles where it does not get propulsion. Gybing \u00b6 When the boat makes any turn as follows, it is called a Gybe or Gybing . The sails change sides. Through the turn, the wind hits the stern of the boat before the bow. You can also say that the bow of the boat is downwind or leeward of the stern. When sailing on most angles relative to the wind, the sail is always blown to the downwind side of the boat. However, sailing nearly straight downwind, both sides of the boat are equally \"downwind\" relative to eachother. This means that the sail can be on either side of the boat. The sail propells the boat throughout a gybe, so it is possible to conduct the turn more gradually than a tack. However, because the sail can be on either side, the sails can switch sides in an uncontrolled way as the boat moves in the waves. For this reason, Raye avoids sailing on angles close to straight downwind, and gybes by doing a quick ~60\u00b0 turn. Note that \"gybe\" is the spelling used in Canadian and British english, whereas in American english it is spelled \" Jibe \" Combinations of Turns \u00b6 Of course, it is possible to do two or more of these types of turns in one continuous motion. What two types of turns does the boat do in the image below? Answer: In the turn shown by the first arrow, the sail stays on the port side of the boat while it steers to point further downwind. This means that the first part of the maneuver is bearing off . In the next part of the maneuver, the sail changes sides and the stern of the boat is upwind of the bow. This part of the maneuver is a gybe . Keywords on this Page \u00b6 Higher (in relation to pointing) Lower (in relation to pointing) Heading Up Bearing Off Tack Gybe (aka Jibe)","title":"Types of Turns"},{"location":"reference/sailing/turning/#types-of-turns","text":"In sailing, there are 4 distinct types of turns. Read the descriptions below, and observe how they fit into the diagrams. Note that any of these types of turn can be done in either the clockwise or counter-clockwise directions.","title":"Types of Turns"},{"location":"reference/sailing/turning/#classifying-types-of-turns-summary","text":"The following flowchart summarizes how to distinguish between different types of turns. Note: to point higher means to steer your boat to point in a direction closer to straight into the wind to point lower means to steer your boat to point in a direction closer towards to straight downwind graph LR B[Classify a Turn] --> C{Does the sail change<br/>sides during the turn?}; C --> |Yes| E{Which end of<br/>the boat is upwind<br/>during the turn?}; C --> |No| D{Does the<br/>boat point higher<br/>or lower at the end<br/>of the turn?}; D --> |Higher| F[Heading Up]; D --> |Lower| G[Bearing Off]; E --> |Bow| H[Tack]; E --> |Stern| I[Gybe]; The diagrams in this section show outlines of the hull of a boat and its main sail going through turns. As is common in these types of diagrams, assume that the wind is blowing down from the top of the screen unless there is an arrow that indicates otherwise.","title":"Classifying Types Of Turns Summary"},{"location":"reference/sailing/turning/#heading-up","text":"When the boat makes any turn as follows, it is called Heading Up : At the end of the turn, the boat is pointing higher . Throughout the turn, the sails stay on the same side of the boat. In other words, the sails do not cross between the starboard and port sides. Unlike some of the other turns listed here, heading up can be a large turn or a small course adjustment of just a few degrees. The image below shows a boat heading up. Notice how the sail stays on the starboard side of the boat.","title":"Heading Up"},{"location":"reference/sailing/turning/#bearing-off","text":"When the boat makes any turn as follows, it is called Bearing Off : At the end of the turn, the boat is pointing lower . Throughout the turn, the sails stays on the same side of the boat (port or starboard). Like heading up, bearing off can be a small course adjustment.","title":"Bearing Off"},{"location":"reference/sailing/turning/#tacking","text":"When the boat makes any turn as follows, it is called a Tack or Tacking : The sails change sides. Through the turn, the wind hits the bow of the boat before the stern. You can also say that the bow is upwind or windward of the stern. Notice how at some point throughout this turn, the boat will be pointing straight into the wind. While the boat points nearly straight into the wind, the sails don't generate any forward propulsion. This means that a tack must be a large (at least ~90\u00b0) turn all at once, so that the boat's momentum carries it through the range of angles where it does not get propulsion.","title":"Tacking"},{"location":"reference/sailing/turning/#gybing","text":"When the boat makes any turn as follows, it is called a Gybe or Gybing . The sails change sides. Through the turn, the wind hits the stern of the boat before the bow. You can also say that the bow of the boat is downwind or leeward of the stern. When sailing on most angles relative to the wind, the sail is always blown to the downwind side of the boat. However, sailing nearly straight downwind, both sides of the boat are equally \"downwind\" relative to eachother. This means that the sail can be on either side of the boat. The sail propells the boat throughout a gybe, so it is possible to conduct the turn more gradually than a tack. However, because the sail can be on either side, the sails can switch sides in an uncontrolled way as the boat moves in the waves. For this reason, Raye avoids sailing on angles close to straight downwind, and gybes by doing a quick ~60\u00b0 turn. Note that \"gybe\" is the spelling used in Canadian and British english, whereas in American english it is spelled \" Jibe \"","title":"Gybing"},{"location":"reference/sailing/turning/#combinations-of-turns","text":"Of course, it is possible to do two or more of these types of turns in one continuous motion. What two types of turns does the boat do in the image below? Answer: In the turn shown by the first arrow, the sail stays on the port side of the boat while it steers to point further downwind. This means that the first part of the maneuver is bearing off . In the next part of the maneuver, the sail changes sides and the stern of the boat is upwind of the bow. This part of the maneuver is a gybe .","title":"Combinations of Turns"},{"location":"reference/sailing/turning/#keywords-on-this-page","text":"Higher (in relation to pointing) Lower (in relation to pointing) Heading Up Bearing Off Tack Gybe (aka Jibe)","title":"Keywords on this Page"}]}